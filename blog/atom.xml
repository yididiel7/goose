<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://block.github.io/goose/blog</id>
    <title>codename goose Blog</title>
    <updated>2025-04-23T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://block.github.io/goose/blog"/>
    <subtitle>codename goose Blog</subtitle>
    <icon>https://block.github.io/goose/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[4 Things You Need to Know Before Using Goose]]></title>
        <id>https://block.github.io/goose/blog/2025/04/23/things-need-to-know</id>
        <link href="https://block.github.io/goose/blog/2025/04/23/things-need-to-know"/>
        <updated>2025-04-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn what you need to get started with Goose - a local open source AI agent that's powered by the LLM of your choice.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/cover-2ba7c2e15786be2db6108c91d27dc1ec.png" width="2240" height="1260" class="img_ev3q"></p>
<p>So you‚Äôve heard about Goose. Maybe you saw a livestream, someone on your team mentioned it, or you just stumbled into our corner of the internet while trying to automate your dev setup.  Either way‚Äîlove that for you.</p>
<p>Goose is a local, open source AI agent that can automate tasks, interact with your codebase, and connect to a growing ecosystem of tools. But before you hit install, here are four things you should know to get the most out of it.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="so-waitwhat-is-goose-actually">So Wait‚ÄîWhat <em>Is</em> Goose, Actually?<a href="https://block.github.io/goose/blog/2025/04/23/things-need-to-know#so-waitwhat-is-goose-actually" class="hash-link" aria-label="Direct link to so-waitwhat-is-goose-actually" title="Direct link to so-waitwhat-is-goose-actually">‚Äã</a></h2>
<p>Goose is an <strong>MCP client</strong>.</p>
<p>That means it connects to tools and data through something called the <a href="https://www.anthropic.com/news/model-context-protocol" target="_blank" rel="noopener noreferrer"><strong>Model Context Protocol (MCP)</strong></a>‚Äîan open standard that makes it possible for AI agents to interact with external systems through natural language. If you‚Äôve used Claude Desktop, Windsurf, Agent mode in VS Code or Cursor you‚Äôve already used an MCP client, even if you didn‚Äôt realize it.</p>
<p>Here‚Äôs what makes Goose different:</p>
<ul>
<li>It runs <strong>locally</strong>, not in someone else‚Äôs cloud</li>
<li>You <strong>bring your own LLM</strong>, allowing you to use the one that works best for you</li>
<li>You can <strong>add new capabilities</strong>, using open-source MCP servers</li>
</ul>
<p>Think of it less like ‚Äúan AI assistant‚Äù and more like ‚Äúyour personal automation toolkit.‚Äù You decide which LLM to use, what tools it should have access to, and what tasks it can perform. You're not locked in; you're in charge.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-pick-the-right-llm">1. Pick the Right LLM<a href="https://block.github.io/goose/blog/2025/04/23/things-need-to-know#1-pick-the-right-llm" class="hash-link" aria-label="Direct link to 1. Pick the Right LLM" title="Direct link to 1. Pick the Right LLM">‚Äã</a></h2>
<p>Goose doesn‚Äôt bundle in an LLM. You bring your own LLM. That means you get to choose what kind of model works best for you, whether it‚Äôs a fancy hosted one like Claude or Gemini, or something more private and local like Ollama.</p>
<p>But heads up: not every model is created equal, especially when it comes to privacy, performance, or how much they charge you per token. If you're just exploring, a cloud-hosted LLM with a free tier is a great place to start. But if you‚Äôre working with sensitive data or just don‚Äôt want to send things off to a third-party server, local is the way to go.</p>
<p>Either way, Goose gives you the flexibility.</p>
<p>That said, if you‚Äôre looking for the best performance with Goose right now, Anthropic's Claude 3.5 Sonnet and OpenAI's GPT-4o (2024-11-20) are recommended, as they currently offer the strongest support for tool calling.</p>
<p>Curious how other models stack up? Check out the <a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark/#leaderboard" target="_blank" rel="noopener noreferrer">Community-Inspired Benchmark Leaderboard</a> to see how your favorite model performs with Goose.</p>
<p>And if you‚Äôre still deciding, here‚Äôs the full list of <a href="https://block.github.io/goose/docs/getting-started/providers#available-providers" target="_blank" rel="noopener noreferrer">available LLM providers</a>.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-understand-what-mcp-servers-are">2. Understand What MCP Servers Are<a href="https://block.github.io/goose/blog/2025/04/23/things-need-to-know#2-understand-what-mcp-servers-are" class="hash-link" aria-label="Direct link to 2. Understand What MCP Servers Are" title="Direct link to 2. Understand What MCP Servers Are">‚Äã</a></h2>
<p>Here‚Äôs where things get fun. Goose is a client that speaks <strong>MCP</strong>. MCP is what makes it possible to talk to other apps and tools <em>as part of your prompt</em>. Want to read emails, check GitHub issues, run an automated test, or scrape a webpage? That‚Äôs where MCP servers come in.</p>
<p>Each server gives Goose a new ability.</p>
<p>The real question is: <em>what do you want Goose to be able to do?</em> If there's a server for it, you can probably make it happen. And yes, there's an entire <a href="https://glama.ai/mcp/servers" target="_blank" rel="noopener noreferrer">directory of MCP servers</a> where you can search by tool, downloads, you name it.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-there-can-be-costs">3. There <em>Can</em> Be Costs<a href="https://block.github.io/goose/blog/2025/04/23/things-need-to-know#3-there-can-be-costs" class="hash-link" aria-label="Direct link to 3-there-can-be-costs" title="Direct link to 3-there-can-be-costs">‚Äã</a></h2>
<p>Goose itself? Totally free and open source. üéâ But your LLM provider might not be as generous.</p>
<p>Most models give you a free tier to play around with, but if you're doing anything intensive or using it often, you‚Äôll eventually run into rate limits or token charges. That‚Äôs normal but it can sneak up on you if you‚Äôre not expecting it.</p>
<p>To help you manage this, there is a <a href="https://block.github.io/goose/docs/guides/handling-llm-rate-limits-with-goose/" target="_blank" rel="noopener noreferrer">Handling Rate Limits Guide</a> that you can check out.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-tap-into-the-community">4. Tap Into the Community<a href="https://block.github.io/goose/blog/2025/04/23/things-need-to-know#4-tap-into-the-community" class="hash-link" aria-label="Direct link to 4. Tap Into the Community" title="Direct link to 4. Tap Into the Community">‚Äã</a></h2>
<p>This part matters more than most people realize.</p>
<p>Goose has an entire community behind it‚Äîfolks building, exploring, breaking things (and fixing them), and sharing everything they learn along the way. We hang out on <a href="https://discord.gg/7GaTvbDwga" target="_blank" rel="noopener noreferrer">Discord</a>, we answer questions in <a href="https://github.com/block/goose/discussions" target="_blank" rel="noopener noreferrer">GitHub Discussions</a>, and we host livestreams every week to show off what Goose can do and how to make it do more.</p>
<p>There‚Äôs:</p>
<ul>
<li><strong>Goosing Around</strong> ‚Äì casual deep dives where we build in public</li>
<li><strong>Wild Goose Case</strong> ‚Äì showcasing cool community projects</li>
<li><strong>Great Goose Off</strong> - same task, same time limit, but different prompts, MCP servers, and strategies</li>
</ul>
<p>You‚Äôll find those livestreams on our <a href="https://www.youtube.com/@blockopensource/streams" target="_blank" rel="noopener noreferrer">YouTube channel</a>, and upcoming ones on the Discord calendar. Plus, if you prefer documentation, the <a href="https://block.github.io/goose/" target="_blank" rel="noopener noreferrer">Goose docs</a> and <a href="https://block.github.io/goose/blog" target="_blank" rel="noopener noreferrer">blog</a> are constantly being updated with new guides, tips, and tutorials.</p>
<hr>
<p>If you've got those four things: a performant LLM, the right MCP servers, a basic understanding of LLM cost, and a place to ask questions, you're more than ready to Goose.</p>
<p>Now, head over to the <a href="https://block.github.io/goose/docs/quickstart" target="_blank" rel="noopener noreferrer">Quickstart Guide</a> and get started.</p>
<p>Oh and when you get to the <a href="https://block.github.io/goose/docs/quickstart/#write-prompt" target="_blank" rel="noopener noreferrer">Tic-Tac-Toe game</a>, I‚Äôll bet you 10 Goosebucks you won‚Äôt beat the bot.</p>
]]></content>
        <author>
            <name>Ebony Louis</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How One Contribution Can Spark Many Wins]]></title>
        <id>https://block.github.io/goose/blog/2025/04/22/community-bestcodes</id>
        <link href="https://block.github.io/goose/blog/2025/04/22/community-bestcodes"/>
        <updated>2025-04-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The snowball effect of one contributor's small fixes]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/bestcodes-3d6c50de10a2d84def19d515aaea0724.png" width="1206" height="633" class="img_ev3q"></p>
<p>The only way to discover how much of an impact your contributions can make is to submit them and hope for the best. Sometimes, what feels like "just a small fix" can end up reshaping an open source project or inspiring a brand new feature. Here's how one of our top contributors turned a small build fix into important improvements for the Goose experience.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-bestcodes-discovered-goose">How BestCodes Discovered Goose<a href="https://block.github.io/goose/blog/2025/04/22/community-bestcodes#how-bestcodes-discovered-goose" class="hash-link" aria-label="Direct link to How BestCodes Discovered Goose" title="Direct link to How BestCodes Discovered Goose">‚Äã</a></h2>
<p><a href="https://bestcodes.dev/" target="_blank" rel="noopener noreferrer">BestCodes (aka William Steele)</a> first discovered Goose during a <a href="https://www.youtube.com/watch?v=O-zJJN-TkXc&amp;ab_channel=AngieJones" target="_blank" rel="noopener noreferrer">GitHub Open Source Friday livestream</a> and decided to give it a try. At the time, Goose offered limited support for Windows/Linux (with more work in progress before any official release). Since BestCodes wasn't a Mac user, he wanted to help bring support to Linux. After lots of troubleshooting, he ended up creating <a href="https://github.com/block/goose/pull/2070" target="_blank" rel="noopener noreferrer">a Debian build fix</a> that finally let him start using Goose on Linux.</p>
<p>Even though BestCodes wondered if such a small fix was worth sharing, it was this "small" contribution that enabled fellow community members wanting to use Goose on Linux, and gave him momentum for future PRs. His experience is proof that your contribution has a chance to help someone, and you should share it! You never know what curiosity and the open source community can make happen.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-momentum">Building Momentum<a href="https://block.github.io/goose/blog/2025/04/22/community-bestcodes#building-momentum" class="hash-link" aria-label="Direct link to Building Momentum" title="Direct link to Building Momentum">‚Äã</a></h2>
<p>BestCodes has continued to make Goose better with thoughtful improvements‚Äîfrom <a href="https://github.com/block/goose/pull/2079" target="_blank" rel="noopener noreferrer">polishing the UI</a> and <a href="https://github.com/block/goose/pull/2079" target="_blank" rel="noopener noreferrer">refining load states</a>, to <a href="https://github.com/block/goose/pull/2279" target="_blank" rel="noopener noreferrer">fixing subtle bugs</a> that make the Goose experience smoother for everyone. You can check out <a href="https://github.com/block/goose/pulls?q=is%3Apr+is%3Aclosed+author%3AThe-Best-Codes" target="_blank" rel="noopener noreferrer">BestCodes' contributions on GitHub</a>.</p>
<p>Thank you so much for your continued support and contributions, BestCodes! Your work brings us one step closer to a full Goose experience on Windows and Linux.</p>
<p>To show how grateful we are for your contributions, we've granted you the exclusive ‚ú®Top Contributor‚ú® badge on the Block Open Source Discord! Plus, you'll also be receiving exclusive codename goose swag. üëÄü™ø</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="become-a-top-contributor">Become A Top Contributor<a href="https://block.github.io/goose/blog/2025/04/22/community-bestcodes#become-a-top-contributor" class="hash-link" aria-label="Direct link to Become A Top Contributor" title="Direct link to Become A Top Contributor">‚Äã</a></h2>
<p>Interested in contributing to goose and having your work featured? Whether it's fixing bugs, sharing ideas, or helping others, every contribution from the open source community has the chance to help someone. You can <a href="https://discord.gg/block-opensource" target="_blank" rel="noopener noreferrer">join the Block Open Source Discord</a> or <a href="https://block.github.io/goose/" target="_blank" rel="noopener noreferrer">get started using codename goose</a> today.</p>
]]></content>
        <author>
            <name>Tania Chakraborty</name>
            <uri>https://taniachakraborty.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MCP Is Rewriting the Rules of API Integration]]></title>
        <id>https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration</id>
        <link href="https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration"/>
        <updated>2025-04-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A developer's guide to modernizing API infrastructure with AI agents and Model Context Protocol. Learn about the benefits, integration strategies, and how to address security considerations.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/cover-1e2153c66f3f0c92da7bbaafd240a9b4.png" width="1920" height="1080" class="img_ev3q"></p>
<p>As developers, we're always looking for ways to build more efficient, scalable, and intelligent applications. For years, RESTful APIs have been our go-to for connecting services. Here are some ways you can integrate AI agents and MCP into your existing API infrastructure to make it smarter, more efficient, and easier to maintain.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction-the-intelligent-evolution-of-your-apis">Introduction: The Intelligent Evolution of Your APIs<a href="https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration#introduction-the-intelligent-evolution-of-your-apis" class="hash-link" aria-label="Direct link to Introduction: The Intelligent Evolution of Your APIs" title="Direct link to Introduction: The Intelligent Evolution of Your APIs">‚Äã</a></h2>
<p>In March 2023, OpenAI announced an easier integration to ChatGPT by using properly-formatted OpenAPI specification files with meticulously-written and detailed instructions in the same file. This announcement gained a lot of attention in developer communities. The business impact was having developers and documentation writers working on one gigantic spec file together, to provide ChatGPT the necessary context to understand which API to use, and how.</p>
<p>Skip ahead just a short while, and <a href="https://news.microsoft.com/source/features/ai/ai-agents-what-they-are-and-how-theyll-change-the-way-we-work/" target="_blank" rel="noopener noreferrer">AI agents</a> combined with the <a href="https://modelcontextprotocol.io/introduction" target="_blank" rel="noopener noreferrer">Model Context Protocol (MCP)</a> are splitting this workload where MCP could contain the context and awareness, and your API team can focus on the API itself. These aren't just incremental improvements, either; the combination of Agentic AI and MCP represent a fundamental shift in how we connect and interact with data and services.</p>
<p>The shift to <a href="https://block.github.io/goose/blog/2025/02/17/agentic-ai-mcp/">using AI Agents and MCP</a> has the potential to be as big a change as the introduction of REST APIs was back in 2005. Imagine a world where integrations are more dynamic, context-aware, and require less manual coding. This isn't a distant future -- it's already happening. This is an opportunity for us to boost productivity, enhance app intelligence, and ultimately deliver better experiences to our users, clients, and customers.</p>
<p>Let's use an example: imagine your team wants AI to handle dynamic pricing adjustments in your e-commerce workflow at Square. If you could gain a faster response time to market changes or inventory, you could reduce the need to build dozens or hundreds of dynamic pricing rules into your code. Your productivity as a developer goes up, and you have less code to maintain. You could write those rules in a more spoken-language way, and the AI agent can handle the rest through MCP and your APIs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="from-static-endpoints-to-intelligent-interactions">From Static Endpoints to Intelligent Interactions<a href="https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration#from-static-endpoints-to-intelligent-interactions" class="hash-link" aria-label="Direct link to From Static Endpoints to Intelligent Interactions" title="Direct link to From Static Endpoints to Intelligent Interactions">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="current-landscape-the-limitations-of-traditional-apis">Current Landscape: The Limitations of Traditional APIs<a href="https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration#current-landscape-the-limitations-of-traditional-apis" class="hash-link" aria-label="Direct link to Current Landscape: The Limitations of Traditional APIs" title="Direct link to Current Landscape: The Limitations of Traditional APIs">‚Äã</a></h3>
<p>Many of our current systems rely heavily on traditional APIs, like RESTful APIs, which are designed with static endpoints that respond to specific requests with specific results. While these APIs have served us well (and certainly aren't going away any time soon), they come with limitations:</p>
<ul>
<li>The static nature of RESTful APIs makes them more rigid, less adaptable to business changes, and require hard rules around versioning to provide compatibility.</li>
<li>They often require significant manual effort to define endpoints, handle data transformations, and manage complex workflows. This can lead to slower development cycles and increased maintenance overhead.</li>
</ul>
<p><strong>The AI opportunity lies in leveraging intelligent agents, combined with MCP, to create more adaptive integrations.</strong> These agents can understand context, discover relevant services, and negotiate interactions in a more dynamic way than static API calls. The static APIs are still being used, but the AI agents can navigate those more easily than changing your code calling the APIs and parsing and validating responses, and handling errors.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="development-impact-boosting-productivity-enhancing-user-experiences">Development Impact: Boosting Productivity, Enhancing User Experiences<a href="https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration#development-impact-boosting-productivity-enhancing-user-experiences" class="hash-link" aria-label="Direct link to Development Impact: Boosting Productivity, Enhancing User Experiences" title="Direct link to Development Impact: Boosting Productivity, Enhancing User Experiences">‚Äã</a></h3>
<p>This dual integration of AI agents and MCP can have a significant positive impact on your development processes and the applications you build:</p>
<ul>
<li><strong>Developer Productivity:</strong> By automating many integration tasks and reducing the need for extensive manual coding, AI agents free up our time to focus on core application logic and innovation. (And testing. And security. And documentation. And...)</li>
<li><strong>Customer Satisfaction:</strong> Intelligent integrations can lead to more personalized and responsive user experiences. Agents can facilitate real-time data analysis and context-aware interactions, making our applications smarter and more user-friendly.</li>
<li><strong>Scalability:</strong> As your application grows, the complexity of managing multiple APIs can become overwhelming. <a href="https://block.github.io/goose/blog/2025/02/21/gooseteam-mcp/">Using multiple AI agents</a> can help manage this complexity by dynamically adapting to changes in the underlying services and workflows.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="business-impact-driving-efficiency-and-cost-savings">Business Impact: Driving Efficiency and Cost Savings<a href="https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration#business-impact-driving-efficiency-and-cost-savings" class="hash-link" aria-label="Direct link to Business Impact: Driving Efficiency and Cost Savings" title="Direct link to Business Impact: Driving Efficiency and Cost Savings">‚Äã</a></h3>
<p>From the business side, the integration of AI agents and MCP can lead to significant cost savings and efficiency gains. Here are some key areas where you can expect to see improvements:</p>
<p><strong>Example ROI Calculation (Per Developer):</strong></p>
<p>Traditional API Development:</p>
<ul>
<li>Average time to add feature: 2 weeks</li>
<li>Developer cost: $150/hour</li>
<li>Assuming 40 hours/week: 2 weeks * 40 hours/week * $150/hour = $12,000</li>
</ul>
<p>AI-Agent Enabled:</p>
<ul>
<li>Average time to add feature: 2 days</li>
<li>Developer cost: $150/hour</li>
<li>Assuming 8 hours/day: 2 days * 8 hours/day * $150/hour = $2,400</li>
</ul>
<p>Annual savings for 50 features: ( $12,000 - $2,400 ) * 50 = <strong>$480,000 per developer</strong></p>
<p>This illustrates the potential for significant time and cost savings per developer by adopting AI agents.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="integrating-ai-and-mcp-navigating-the-landscape">Integrating AI and MCP: Navigating the Landscape<a href="https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration#integrating-ai-and-mcp-navigating-the-landscape" class="hash-link" aria-label="Direct link to Integrating AI and MCP: Navigating the Landscape" title="Direct link to Integrating AI and MCP: Navigating the Landscape">‚Äã</a></h2>
<p>Integrating AI agents, especially through a platform like MCP, requires careful consideration.</p>
<ul>
<li>Risk Management: MCP, while promising, is a newer technology. Your team needs to thoroughly evaluate <a href="https://block.github.io/goose/blog/2025/03/26/mcp-security/">potential security concerns</a> and understand the maturity of the platform before deep integration into critical systems.</li>
<li>Planning for Continuity and Versioning: As with any evolving technology, you will need strategies for ensuring the continuity of integrations and managing versioning of both the AI agents and MCP itself.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="phased-approach-a-practical-integration-strategy">Phased Approach: A Practical Integration Strategy<a href="https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration#phased-approach-a-practical-integration-strategy" class="hash-link" aria-label="Direct link to Phased Approach: A Practical Integration Strategy" title="Direct link to Phased Approach: A Practical Integration Strategy">‚Äã</a></h3>
<p>A step-by-step approach can help mitigate risks, and learn effectively through feedback, as you integrate AI agents via MCP:</p>
<p><strong>Phase 1: Assessment (Initial Exploration)</strong></p>
<ul>
<li>Look through your existing API usage, and identify integration possibilities</li>
<li>Consider the ROI: start with small ideas and grow your integration efforts over time</li>
<li>Build initial business/tech plans for adopting AI agents and MCP</li>
</ul>
<p><strong>Phase 2: A/B Testing and Pilot Projects</strong></p>
<ul>
<li>Select a low-risk, high-value service for initial AI agent integration via MCP</li>
<li>Implement the integration, then do thorough A/B testing and comparisons against the traditional API approach</li>
<li>Measure the results, gather benchmark/performance data, and talk to the team about what you find</li>
</ul>
<p><strong>Phase 3: Scale and Optimization</strong></p>
<ul>
<li>Take it a step at a time: based on the results, take on bigger and more complex integration ideas</li>
<li>Continue to optimize your integration process over time</li>
<li>Use feedback from your dev teams and end-users to refine your process</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="measuring-success-quantifying-the-impact">Measuring Success: Quantifying the Impact<a href="https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration#measuring-success-quantifying-the-impact" class="hash-link" aria-label="Direct link to Measuring Success: Quantifying the Impact" title="Direct link to Measuring Success: Quantifying the Impact">‚Äã</a></h2>
<p>For the business readers: to understand the benefits of integrating AI agents via MCP, here are some key performance indicators (KPIs) you can track:</p>
<ul>
<li>Development Velocity</li>
<li>Error Rates</li>
<li>Customer Satisfaction</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="build-your-case-study-and-share-your-learnings">Build Your Case Study and Share Your Learnings<a href="https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration#build-your-case-study-and-share-your-learnings" class="hash-link" aria-label="Direct link to Build Your Case Study and Share Your Learnings" title="Direct link to Build Your Case Study and Share Your Learnings">‚Äã</a></h3>
<p>Documenting your team's  journey and sharing your experiences is valuable for both your team and the wider developer community. Here are a few things you should share to help demonstrate the impact of your projects:</p>
<ul>
<li><strong>Before and After Metrics</strong>: what kind of improvements did you see in development time, error rates after integrating AI agents and MCP?</li>
<li><strong>Team Feedback</strong>: there's going to be a learning curve here, similar to what we all experienced when integrating APIs; gather feedback about how the integration workflows are going and what could be improved</li>
<li><strong>Customer/End User Impact</strong>: highlight any positive changes in user engagement, satisfaction, or other user/customer metrics</li>
<li><strong>Lessons Learned</strong>: perhaps the most important; what worked well, what didn't, how are you changing the process for the next phase of integration?</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="where-do-we-go-from-here">Where do we go from here?<a href="https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration#where-do-we-go-from-here" class="hash-link" aria-label="Direct link to Where do we go from here?" title="Direct link to Where do we go from here?">‚Äã</a></h2>
<p>Understanding your existing integrations, and identifying potential areas for improvement with AI agents and MCP is your starting point. There is a lot to learn about integrating AI agents, and MCP is still a new technology.</p>
<p>Finding those opportunities where AI can help, and outlining a plan to gradually adopt AI and MCP into your projects is the best way to start.</p>
<p>Keep in mind, this integration landscape is still evolving. Stay open to new ideas, and adapt your approach as the technology matures. Building smarter applications is a journey, and there will be forks in the road.</p>
<p>Additional Reading:</p>
<ol>
<li>What are AI Agents</li>
</ol>
<ul>
<li><a href="https://news.microsoft.com/source/features/ai/ai-agents-what-they-are-and-how-theyll-change-the-way-we-work/" target="_blank" rel="noopener noreferrer">AI agents ‚Äî what they are, and how they‚Äôll change the way we work</a></li>
<li><a href="https://www.aitrends.com/ai-agents/what-are-ai-agents-and-why-do-they-matter/" target="_blank" rel="noopener noreferrer">What are AI Agents and Why do They Matter?</a></li>
</ul>
<ol start="2">
<li>
<p><a href="https://modelcontextprotocol.io/introduction" target="_blank" rel="noopener noreferrer">An Introduction to MCP</a></p>
</li>
<li>
<p><a href="https://block.github.io/goose/blog/2024/12/10/connecting-ai-agents-to-your-systems-with-mcp/">Connecting AI Agents to Your Systems with MCP</a></p>
</li>
<li>
<p><a href="https://www.mckinsey.com/featured-insights/artificial-intelligence/global-ai-survey-ai-proves-its-worth-but-few-scale-impact" target="_blank" rel="noopener noreferrer">Global AI Survey: AI proves its worth, but few scale impact</a></p>
</li>
<li>
<p><a href="https://www.thoughtworks.com/en-us/insights/blog/generative-ai/generative-ai-legacy-modernization-insurance-erik-doernenburg" target="_blank" rel="noopener noreferrer">Bringing generative AI to bear on legacy modernization in insurance</a></p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tldr-common-questions">TL;DR Common Questions<a href="https://block.github.io/goose/blog/2025/04/22/mcp-is-rewriting-the-rules-of-api-integration#tldr-common-questions" class="hash-link" aria-label="Direct link to TL;DR Common Questions" title="Direct link to TL;DR Common Questions">‚Äã</a></h2>
<p>Q: <strong>How will MCP help with APIs?</strong><br>
A: Start with <a href="https://block.github.io/goose/blog/2025/02/17/agentic-ai-mcp/#mcp-ecosystem">this post by Angie Jones</a>. MCP provides context about your API, to give AI Agents more context and awareness of the capabilities of your API endpoints and responses. This can help the Agent understand the intent of the request, and dynamically invoke (or "call") to underlying API endpoint, handle data transformation, and return a response. No more manually writing the code, response validators, error handlers, and so on!</p>
<p>Q: <strong>What are some initial steps I can take as a developer to explore AI agents and MCP?</strong><br>
A: Start by researching the fundamental concepts, and use other existing MCP servers. We recommend starting with <a href="https://block.github.io/goose" target="_blank" rel="noopener noreferrer">Goose</a> to integrate an existing MCP server. We have a growing <a href="https://block.github.io/docs/category/tutorials/" target="_blank" rel="noopener noreferrer">listof tutorials</a> to help you find some technologies like GitHub, PostgreSQL, Google Maps, and more. Once you feel comfortable with using MCP, you can start building your own MCP server for your own APIs.</p>
<p>Q: <strong>What about AI and MCP security?</strong><br>
A: AI agents can enhance security through better context awareness in interactions, but MCP is still relatively new, and requires <a href="https://block.github.io/goose/blog/2025/03/26/mcp-security/">careful security evaluations</a>. Your business and dev teams should thoroughly investigate MCP's capabilities to ensure you're building appropriate access control, and managing data privacy.</p>
<p>Q: <strong>How long would a full migration typically take?</strong><br>
A: It's too dynamic to give one solid answer. Integration and migrations can vary a lot, depending on the scope of your existing API usage and existing integrations. Start small, build some pilot projects to try it out, and these might only take a few days or weeks.</p>
<p>Q: <strong>What are some potential problems devs might encounter on this AI/MCP journey?</strong><br>
A: There's a learning curve associated with any technology. This can be compounded when you consider that MCP is still relatively new and evolving. The greater community needs strategies around testing and debugging MCP, as well as considering security and data privacy. This means that what you learn today will need to be re-evaluated even a few short months from now.</p>
<p>Q: <strong>How mature and production-ready is MCP for enterprise-level AI integration?</strong><br>
A: Your approach on this may vary depending on whether you're building your own MCP server, or whether you're using third-party MCP servers in your integration. Developers should evaluate all of the benefits of MCP and consider the work being done around security and data privacy. Focus on a small pilot project or non-critical system initially to assess its suitability for your specific needs. Stay updated on <a href="https://modelcontextprotocol.io/development/roadmap" target="_blank" rel="noopener noreferrer">MCP's development roadmap</a> and community feedback.</p>
]]></content>
        <author>
            <name>W Ian Douglas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MCP in the Enterprise: Real World Adoption at Block]]></title>
        <id>https://block.github.io/goose/blog/2025/04/21/mcp-in-enterprise</id>
        <link href="https://block.github.io/goose/blog/2025/04/21/mcp-in-enterprise"/>
        <updated>2025-04-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How Block is using MCP to power real world automation company-wide.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/mcp-for-enterprise-5912379e407d5f5139b2636dcfc138f5.png" width="1200" height="630" class="img_ev3q"></p>
<p>At Block, we've been exploring how to make AI agents genuinely useful in a business setting. Not just for demos or prototypes, but for real, everyday work.
As one of the early collaborators on the <a href="https://www.anthropic.com/news/model-context-protocol" target="_blank" rel="noopener noreferrer">Model Context Protocol (MCP)</a>, we partnered with Anthropic to help shape and define the open standard that bridges AI agents with real-world tools and data.</p>
<p>MCP lets AI agents interact with APIs, tools, and data systems through a common interface. It eliminates the guesswork by exposing deterministic tool definitions, so the agent doesn't have to guess how to call an API.
Instead, it focuses on what we actually want... results!</p>
<p>While others are still experimenting, we've rolled this out company-wide at Block, and with real impact.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-we-chose-mcp-at-block">Why We Chose MCP at Block<a href="https://block.github.io/goose/blog/2025/04/21/mcp-in-enterprise#why-we-chose-mcp-at-block" class="hash-link" aria-label="Direct link to Why We Chose MCP at Block" title="Direct link to Why We Chose MCP at Block">‚Äã</a></h2>
<p>We didn't want to build one-off integrations or hardwire AI into a specific vendor ecosystem.
Like most enterprise companies, our needs span engineering, design, security, compliance, customer support, sales, and more.
We wanted flexibility.</p>
<p>MCP gives us that.
It's model-agnostic and tool-agnostic, allowing our AI agent to interact with internal APIs, open source tools, and even off-the-shelf SaaS products, all through the same protocol.</p>
<p>It also aligns well with our <a href="https://block.github.io/goose/blog/2025/03/31/securing-mcp">security philosophy</a>.
MCP allows us to define which models can invoke which tools, and lets us annotate tools as "read-only" or "destructive" to require user confirmation when necessary.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-we-configure-and-secure-mcp">How We Configure and Secure MCP<a href="https://block.github.io/goose/blog/2025/04/21/mcp-in-enterprise#how-we-configure-and-secure-mcp" class="hash-link" aria-label="Direct link to How We Configure and Secure MCP" title="Direct link to How We Configure and Secure MCP">‚Äã</a></h2>
<p>We developed <a href="https://block.github.io/goose/"><strong>Goose</strong></a>, an open source, MCP-compatible AI agent. Thousands of Block employees use the tool daily.
Available as both a CLI and desktop app, Goose comes with default access to a curated set of approved MCP servers.
Most employees report saving 50‚Äì75% of their time on common tasks, and several have shared that work which once took days can now be completed in just a few hours.</p>
<p>To ensure a secure and reliable experience, all MCP servers used internally are authored by our own engineers.
This allows us to tailor each integration to our systems and use cases from development tools to compliance workflows.</p>
<p>Some of our most widely used MCPs include:</p>
<ul>
<li><strong>Snowflake</strong> for querying internal data</li>
<li><strong>GitHub and Jira</strong> for software development workflows</li>
<li><strong>Slack and Google Drive</strong> for information gathering and task coordination</li>
<li><strong>Internal APIs</strong> for specialized use cases like compliance checks and support triage</li>
</ul>
<p>In addition to tool access, Goose relies on large language models (LLMs) to interpret prompts and plan actions.
We use Databricks as our LLM hosting platform, enabling Goose to interact with both Claude and OpenAI models through secure, enterprise-managed endpoints.
We've established corporate agreements with model providers that include data usage protections, and we restrict Goose from being used with certain categories of sensitive data, in line with internal policies.</p>
<p>For service-level authorization, we use OAuth to securely distribute tokens.
Goose is pre-configured to authenticate with commonly used services, and tokens are stored securely using native system keychains.
Currently, OAuth flows are implemented directly within locally run MCP servers, a practical but temporary solution.
We‚Äôre actively exploring more scalable, decoupled patterns for the future.</p>
<p>Additionally, some servers enforce LLM allowlists or restrict tool output from being shared across systems to further minimize data exposure risks.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="real-stories-with-real-impact">Real Stories with Real Impact<a href="https://block.github.io/goose/blog/2025/04/21/mcp-in-enterprise#real-stories-with-real-impact" class="hash-link" aria-label="Direct link to Real Stories with Real Impact" title="Direct link to Real Stories with Real Impact">‚Äã</a></h2>
<p>Goose has become an everyday tool for teams across Block.
With MCP servers acting as flexible connectors, employees are using automation in increasingly creative and practical ways to remove bottlenecks and focus on higher-value work.</p>
<p>Our engineers are using MCP-powered tools to migrate legacy codebases, refactor and simplify complex logic, generate unit tests, streamline dependency upgrades, and speed up triage workflows.
Goose helps developers work across unfamiliar systems, reduce repetitive coding tasks, and deliver improvements faster than traditional approaches.</p>
<p>Data and operations teams are using Goose to query internal systems, summarize large datasets, automate reporting, and surface relevant context from multiple sources.
In many cases, this reduces the reliance on manual data pulls or lengthy back-and-forths with specialists, making insights more accessible to everyone.</p>
<p>Meanwhile, teams in design, product, support, and risk are utilizing Goose in ways that remove overhead from their daily work.
Whether it's generating documentation, triaging tickets, or creating prototypes, MCP-based workflows are proving adaptable beyond engineering.</p>
<p>This shift is helping eliminate the mechanical work that slows us down.
As more teams experiment, they discover new ways to collaborate with Goose and reshape how things get done.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-weve-learned-so-far">What We've Learned So Far<a href="https://block.github.io/goose/blog/2025/04/21/mcp-in-enterprise#what-weve-learned-so-far" class="hash-link" aria-label="Direct link to What We've Learned So Far" title="Direct link to What We've Learned So Far">‚Äã</a></h2>
<p>Rolling out MCP tooling company-wide required more than just technical setup. We invested in:</p>
<ul>
<li>Pre-installed agent access and default server bundles</li>
<li>Weekly education sessions from our internal Developer Relations team</li>
<li>Internal communication channels to seek help as well as share and celebrate wins</li>
</ul>
<p>Some of our takeaways:</p>
<ul>
<li>The easier we made it to start - by pre-installing Goose, bundling MCPs, and auto-configuring models - the faster adoption took off</li>
<li>People get more creative once they see what's possible, especially when they can remix or build on what others have already done</li>
<li>Centralized onboarding and prompt sharing saves time and helps scale best practices</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's Next<a href="https://block.github.io/goose/blog/2025/04/21/mcp-in-enterprise#whats-next" class="hash-link" aria-label="Direct link to What's Next" title="Direct link to What's Next">‚Äã</a></h2>
<p>We're continuing to expand use cases outside of traditional engineering teams. MCP is helping unblock marketing, sales, and support workflows, and we're just getting started.</p>
<p>We're also investing in:</p>
<ul>
<li>More secure defaults and tooling restrictions based on context</li>
<li>Human-in-the-loop features for higher risk operations</li>
<li>Encouraging open source MCP contributions from across the company</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="want-to-learn-more">Want to Learn More?<a href="https://block.github.io/goose/blog/2025/04/21/mcp-in-enterprise#want-to-learn-more" class="hash-link" aria-label="Direct link to Want to Learn More?" title="Direct link to Want to Learn More?">‚Äã</a></h2>
<p>If you're curious about Goose or MCP, check out the <a href="https://block.github.io/goose/docs/quickstart">Goose documentation</a> or <a href="https://spec.modelcontextprotocol.io/" target="_blank" rel="noopener noreferrer">MCP spec</a>.
We'd love to hear how others are approaching AI automation at scale.</p>
<div style="display:none"><p><img decoding="async" loading="lazy" src="https://block.github.io/goose/assets/images/mcp-for-enterprise-social-bb8a18872fedc0046ef72bb413dea851.png" width="1200" height="630" class="img_ev3q"></p></div>
]]></content>
        <author>
            <name>Angie Jones</name>
            <uri>https://angiejones.tech</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[11 Practical Ways I Use AI Agents Without Losing My Authenticity]]></title>
        <id>https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai</id>
        <link href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai"/>
        <updated>2025-04-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[From conference planning to prepping podcasts, here's how I use AI Agents built on MCP for everyday tasks.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="mcp use cases" src="https://block.github.io/goose/assets/images/mcp-use-cases-758ecc959d6334783257fc9d6329e1f2.png" width="2240" height="1260" class="img_ev3q"></p>
<p>"Stop using AI," reads yet another viral post. I get it. It's frustrating to review a colleague's auto-generated work, filled with AI's classic giveaways like generic code comments and phrases like "In today's fast-paced world..."</p>
<p>Still, AI plays a pivotal role in my career. I don't rely on AI to do my work, but I use it to help me brainstorm and work more effciently.
The introduction of <a href="https://modelcontextprotocol.io/" target="_blank" rel="noopener noreferrer">Model Context Protocol (MCP)</a> has made this even easier. MCP is an open standard that gives AI tools the context they need to be useful in the real world. It enables AI agents to interact with APIs, apps, and systems in a structured way. I use <a href="https://block.github.io/goose/">Codename goose</a>, an open source AI agent built on MCP.</p>
<p>Here are 11 real ways I use AI Agents without sacrificing authenticity, creativity, or quality:</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1--hands-free-coding">1. üôåüèø Hands-Free Coding<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#1--hands-free-coding" class="hash-link" aria-label="Direct link to 1. üôåüèø Hands-Free Coding" title="Direct link to 1. üôåüèø Hands-Free Coding">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-case">Use Case<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#use-case" class="hash-link" aria-label="Direct link to Use Case" title="Direct link to Use Case">‚Äã</a></h3>
<p>I spoke to Goose instead of typing, using my voice as input to write code or run tasks.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-its-useful">Why It's Useful<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#why-its-useful" class="hash-link" aria-label="Direct link to Why It's Useful" title="Direct link to Why It's Useful">‚Äã</a></h3>
<p>I have a lot of "my brain has the idea but my hands are full" moments. Whether I'm nursing my baby or recovering from carpal tunnel, this provides an accessible way for me to capture my thoughts without typing.</p>
<p>Sidenote: I met an AI enthusiast at a meetup who said he sometimes gets coding ideas while driving. He's exploring using his voice to vibe code on the go. Stay safe out there. Don't code and drive! üöó‚õëÔ∏è</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-try-it">How to Try It<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#how-to-try-it" class="hash-link" aria-label="Direct link to How to Try It" title="Direct link to How to Try It">‚Äã</a></h3>
<ol>
<li>Follow <a href="https://block.github.io/goose/docs/tutorials/speech-mcp">this tutorial</a></li>
<li>Enable the <a href="https://github.com/Kvadratni/speech-mcp" target="_blank" rel="noopener noreferrer"><code>Speech</code></a> and <a href="https://block.github.io/goose/extensions/detail?id=developer"><code>Developer</code></a> extensions</li>
<li>Prompt Goose:<!-- -->
<blockquote>
<p>I'd like to speak instead of typing.</p>
</blockquote>
</li>
</ol>
<iframe class="aspect-ratio" src="https://www.youtube.com/embed/rurAp_WzOiY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2--prepping-podcast-agendas">2. üé§ Prepping Podcast Agendas<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#2--prepping-podcast-agendas" class="hash-link" aria-label="Direct link to 2. üé§ Prepping Podcast Agendas" title="Direct link to 2. üé§ Prepping Podcast Agendas">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-1">Use Case<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#use-case-1" class="hash-link" aria-label="Direct link to Use Case" title="Direct link to Use Case">‚Äã</a></h3>
<p>I gave Goose a YouTube video of a guest's conference talk. Then, I prompted Goose to create a transcript and generate thoughtful interview questions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-its-useful-1">Why It's Useful<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#why-its-useful-1" class="hash-link" aria-label="Direct link to Why It's Useful" title="Direct link to Why It's Useful">‚Äã</a></h3>
<p>I want guests to feel like I actually know their work, even if I don't have hours to prep. This lets me ask smarter questions and run a better show.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-try-it-1">How to Try It<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#how-to-try-it-1" class="hash-link" aria-label="Direct link to How to Try It" title="Direct link to How to Try It">‚Äã</a></h3>
<ol>
<li>Follow <a href="https://block.github.io/goose/docs/tutorials/youtube-transcript">this tutorial</a></li>
<li>Enable the <a href="https://github.com/jkawamoto/mcp-youtube-transcript" target="_blank" rel="noopener noreferrer"><code>YouTube Transcript</code></a> and <a href="https://block.github.io/goose/extensions/detail?id=developer"><code>Developer</code></a> extensions</li>
<li>Prompt Goose:<!-- -->
<blockquote>
<p>Generate a transcript for this video <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=dQw4w9WgXcQ</a>, then create relevant interview questions based on the content</p>
</blockquote>
</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3--resize-images">3. üñº Resize Images<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#3--resize-images" class="hash-link" aria-label="Direct link to 3. üñº Resize Images" title="Direct link to 3. üñº Resize Images">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-2">Use Case<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#use-case-2" class="hash-link" aria-label="Direct link to Use Case" title="Direct link to Use Case">‚Äã</a></h3>
<p>Speaker management platforms often have different image requirements for headshots. I used to spend an embarrassingly amount of time trying to resize my photo without ruining the aspect ratio. Now, I just ask Goose to do it.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-its-useful-2">Why It's Useful<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#why-its-useful-2" class="hash-link" aria-label="Direct link to Why It's Useful" title="Direct link to Why It's Useful">‚Äã</a></h3>
<p>It saves me from wrestling with random online tools or bloated design apps. I get a clean, correctly sized image in seconds, and it looks exactly how I want it to.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-try-it-2">How to Try It<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#how-to-try-it-2" class="hash-link" aria-label="Direct link to How to Try It" title="Direct link to How to Try It">‚Äã</a></h3>
<ol>
<li>Enable the <a href="https://block.github.io/goose/extensions/detail?id=developer"><code>Developer</code></a> extension</li>
<li>Prompt Goose:<!-- -->
<blockquote>
<p>Resize this image (~/Downloads/image.png) to 1000x1000 pixels. Maintain the aspect ratio and image quality.</p>
</blockquote>
</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4--resume-review-against-job-listings">4. üìù Resume Review Against Job Listings<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#4--resume-review-against-job-listings" class="hash-link" aria-label="Direct link to 4. üìù Resume Review Against Job Listings" title="Direct link to 4. üìù Resume Review Against Job Listings">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-3">Use Case<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#use-case-3" class="hash-link" aria-label="Direct link to Use Case" title="Direct link to Use Case">‚Äã</a></h3>
<p>I've used Goose to compare my current resume to job listings I came across.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-its-useful-3">Why It's Useful<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#why-its-useful-3" class="hash-link" aria-label="Direct link to Why It's Useful" title="Direct link to Why It's Useful">‚Äã</a></h3>
<p>I'm not currently looking for a job, but I like to stay prepared. My strategy involves keeping my resume current and competitive. I do this by comparing my current resume to job listings, but I don't have to do this manually anymore. Instead, Goose can quickly point out my strengths and weaknesses for specific job listings. This approach could help hiring managers review resumes faster as well.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-try-it-3">How to Try It<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#how-to-try-it-3" class="hash-link" aria-label="Direct link to How to Try It" title="Direct link to How to Try It">‚Äã</a></h3>
<ol>
<li>Follow <a href="https://block.github.io/goose/docs/tutorials/pdf-mcp">this tutorial</a></li>
<li>Enable the <a href="https://github.com/michaelneale/mcp-read-pdf" target="_blank" rel="noopener noreferrer"><code>PDF Reader</code></a> extension</li>
<li>Prompt Goose:<!-- -->
<blockquote>
<p>Read the resume at ~/Downloads/resume.pdf and evaluate how well this candidate aligns with the following role requirements:</p>
<ul>
<li>5+ years of backend development experience</li>
<li>Strong system design and distributed systems knowledge</li>
<li>Cloud infrastructure experience (AWS preferred)</li>
<li>Prior experience leading technical projects or teams</li>
<li>Bonus: familiarity with LLMs or AI/ML tools</li>
</ul>
<p>Score each one out of 5, give supporting evidence, and summarize with a final fit rating.</p>
</blockquote>
</li>
</ol>
<iframe class="aspect-ratio" src="https://www.youtube.com/embed/EJf2_iZfaWk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5--understanding-idioms">5. üß† Understanding Idioms<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#5--understanding-idioms" class="hash-link" aria-label="Direct link to 5. üß† Understanding Idioms" title="Direct link to 5. üß† Understanding Idioms">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-4">Use Case<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#use-case-4" class="hash-link" aria-label="Direct link to Use Case" title="Direct link to Use Case">‚Äã</a></h3>
<p>I've asked Goose to explain idioms or references that I didn't understand.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-its-useful-4">Why It's Useful<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#why-its-useful-4" class="hash-link" aria-label="Direct link to Why It's Useful" title="Direct link to Why It's Useful">‚Äã</a></h3>
<p>Because I wasn't born in America and I'm neurodivergent, I sometimes take idioms literally or misinterpret them. Instead of risking embarrassment at work, I quietly ask Goose to translate.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-try-it-4">How to Try It<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#how-to-try-it-4" class="hash-link" aria-label="Direct link to How to Try It" title="Direct link to How to Try It">‚Äã</a></h3>
<ol>
<li>Enable the <a href="https://block.github.io/goose/extensions/detail?id=developer"><code>Developer</code></a> extension</li>
<li>Prompt Goose:<!-- -->
<blockquote>
<p>What does this phrase mean: "Who does Vegas have as the favorite?"</p>
</blockquote>
</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="6--querying-a-relational-database">6. üìä Querying a Relational Database<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#6--querying-a-relational-database" class="hash-link" aria-label="Direct link to 6. üìä Querying a Relational Database" title="Direct link to 6. üìä Querying a Relational Database">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-5">Use Case<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#use-case-5" class="hash-link" aria-label="Direct link to Use Case" title="Direct link to Use Case">‚Äã</a></h3>
<p>I asked Goose for insights about my data using natural language, and it wrote a Common Table Expression for me.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-its-useful-5">Why It's Useful<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#why-its-useful-5" class="hash-link" aria-label="Direct link to Why It's Useful" title="Direct link to Why It's Useful">‚Äã</a></h3>
<p>SQL can get complex with joins, stored procedures, and subqueries. Goose helps me move faster and avoid errors by handling the query logic for me.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-try-it-5">How to Try It<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#how-to-try-it-5" class="hash-link" aria-label="Direct link to How to Try It" title="Direct link to How to Try It">‚Äã</a></h3>
<ol>
<li>Follow <a href="https://block.github.io/goose/docs/tutorials/postgres-mcp">this tutorial</a></li>
<li>Enable the <a href="https://github.com/modelcontextprotocol/servers/tree/HEAD/src/postgres" target="_blank" rel="noopener noreferrer"><code>PostgreSQL</code></a> and <a href="https://block.github.io/goose/extensions/detail?id=developer"><code>Developer</code></a> extensions</li>
<li>Prompt Goose:<!-- -->
<blockquote>
<p>Find my top 3 blog posts by average weekly views over the past 90 days. Include title, URL, average weekly views, and whether they were promoted on social.</p>
</blockquote>
</li>
</ol>
<iframe class="aspect-ratio" src="https://www.youtube.com/embed/PZlYQ5IthYM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="7--planning-my-conference-speaking-strategy">7. üóì Planning My Conference Speaking Strategy<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#7--planning-my-conference-speaking-strategy" class="hash-link" aria-label="Direct link to 7. üóì Planning My Conference Speaking Strategy" title="Direct link to 7. üóì Planning My Conference Speaking Strategy">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-6">Use Case<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#use-case-6" class="hash-link" aria-label="Direct link to Use Case" title="Direct link to Use Case">‚Äã</a></h3>
<p>I've used Goose to analyze historical conference data so I could plan smarter for upcoming CFP deadlines.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-its-useful-6">Why It's Useful<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#why-its-useful-6" class="hash-link" aria-label="Direct link to Why It's Useful" title="Direct link to Why It's Useful">‚Äã</a></h3>
<p>I tend to overbook myself or get anxious that I won't get accepted, so I apply to everything. Then I end up getting accepted to all of them and say yes without thinking, which leads to poor planning and rushed talks. With Goose, I can analyze patterns in CFP timelines and make more intentional choices.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-try-it-6">How to Try It<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#how-to-try-it-6" class="hash-link" aria-label="Direct link to How to Try It" title="Direct link to How to Try It">‚Äã</a></h3>
<ol>
<li>Follow <a href="https://block.github.io/goose/docs/tutorials/agentql-mcp">this tutorial</a></li>
<li>Enable the <a href="https://github.com/tinyfish-io/agentql-mcp" target="_blank" rel="noopener noreferrer"><code>AgentQL</code></a> extension</li>
<li>Prompt Goose:<!-- -->
<blockquote>
<p>I'm a tech conference speaker planning my 2025-2026 submissions.
Extract for developer conferences (attendance &gt; 500) occurring between 2022-2024:</p>
<ul>
<li>Conference name</li>
<li>Conference dates</li>
<li>CFP timeline</li>
</ul>
<p>To identify:</p>
<ul>
<li>Consistent monthly patterns</li>
<li>Whether conferences stick to same months yearly</li>
<li>If CFP windows are consistent year-to-year</li>
<li>Any shifts in traditional timing</li>
</ul>
<p>Structure results as JSON</p>
</blockquote>
</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="8--tracking-down-a-buggy-commit">8. üêû Tracking Down a Buggy Commit<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#8--tracking-down-a-buggy-commit" class="hash-link" aria-label="Direct link to 8. üêû Tracking Down a Buggy Commit" title="Direct link to 8. üêû Tracking Down a Buggy Commit">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-7">Use Case<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#use-case-7" class="hash-link" aria-label="Direct link to Use Case" title="Direct link to Use Case">‚Äã</a></h3>
<p>A feature broke, but I had made so many commits, I couldn't tell which one introduced the bug. I asked Goose to help me run <code>git bisect</code>, so we could identify the problematic code.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-its-useful-7">Why It's Useful<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#why-its-useful-7" class="hash-link" aria-label="Direct link to Why It's Useful" title="Direct link to Why It's Useful">‚Äã</a></h3>
<p>The hardest part of debugging is often just figuring out where to look. Git bisect makes that faster, and Goose walked me through the process without needing to memorize the steps.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-try-it-7">How to Try It<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#how-to-try-it-7" class="hash-link" aria-label="Direct link to How to Try It" title="Direct link to How to Try It">‚Äã</a></h3>
<ol>
<li>Install the <a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="noopener noreferrer">Git CLI</a></li>
<li>Enable the <a href="https://block.github.io/goose/extensions/detail?id=developer"><code>Developer</code></a> extension</li>
<li>Prompt Goose:<!-- -->
<blockquote>
<p>I don't know when I introduced a bug. Can you walk me through using git bisect to find the commit that caused it?</p>
</blockquote>
</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="9--learning-new-technologies">9. üë©üèæ‚Äçüè´ Learning New Technologies<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#9--learning-new-technologies" class="hash-link" aria-label="Direct link to 9. üë©üèæ‚Äçüè´ Learning New Technologies" title="Direct link to 9. üë©üèæ‚Äçüè´ Learning New Technologies">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-8">Use Case<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#use-case-8" class="hash-link" aria-label="Direct link to Use Case" title="Direct link to Use Case">‚Äã</a></h3>
<p>I like to keep up with the latest technologies. Since MCP servers are popular, I used Goose's tutorial extension to walk through building my own MCP server.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-its-useful-8">Why It's Useful<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#why-its-useful-8" class="hash-link" aria-label="Direct link to Why It's Useful" title="Direct link to Why It's Useful">‚Äã</a></h3>
<p>In addition to generating code, AI agents can help you learn how to code. Goose includes a built-in tutorial extension designed to walk users through technical concepts in a hands-on way.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-try-it-8">How to Try It<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#how-to-try-it-8" class="hash-link" aria-label="Direct link to How to Try It" title="Direct link to How to Try It">‚Äã</a></h3>
<ol>
<li>Follow <a href="https://block.github.io/goose/docs/tutorials/tutorial-extension">this tutorial</a></li>
<li>Prompt Goose:<!-- -->
<blockquote>
<p>I'd like to learn how to build an extension or MCP server for Goose</p>
</blockquote>
</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="10--comparing-regulatory-documentation">10. üíº Comparing Regulatory Documentation<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#10--comparing-regulatory-documentation" class="hash-link" aria-label="Direct link to 10. üíº Comparing Regulatory Documentation" title="Direct link to 10. üíº Comparing Regulatory Documentation">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-9">Use Case<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#use-case-9" class="hash-link" aria-label="Direct link to Use Case" title="Direct link to Use Case">‚Äã</a></h3>
<p>I didn't do this myself, but I was impressed to learn that a community member used Goose to compare proposed and final versions of regulatory documents.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-its-useful-9">Why It's Useful<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#why-its-useful-9" class="hash-link" aria-label="Direct link to Why It's Useful" title="Direct link to Why It's Useful">‚Äã</a></h3>
<p>Legal documents are often dense and repetitive. Goose can highlight what actually changed, helping users quickly spot how updates impact compliance or obligations.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-try-it-9">How to Try It<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#how-to-try-it-9" class="hash-link" aria-label="Direct link to How to Try It" title="Direct link to How to Try It">‚Äã</a></h3>
<ol>
<li>Enable the <a href="https://block.github.io/goose/extensions/detail?id=computercontroller"><code>Computer Controller</code></a> extension</li>
<li>Prompt Goose:<!-- -->
<blockquote>
<p>Highlight the differences between these two versions of FinCEN's Investment Adviser AML regulations:</p>
<p>Proposed version (2015): <a href="https://www.federalregister.gov/documents/2015/09/01/2015-21318" target="_blank" rel="noopener noreferrer">https://www.federalregister.gov/documents/2015/09/01/2015-21318</a></p>
<p>Final version (2024): <a href="https://www.federalregister.gov/documents/2024/09/04/2024-19260" target="_blank" rel="noopener noreferrer">https://www.federalregister.gov/documents/2024/09/04/2024-19260</a></p>
<p>Focus on key changes in requirements for investment advisers' AML/CFT programs and how they affect compliance obligations.</p>
</blockquote>
</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="11--prototyping-ideas-quickly">11. üõ† Prototyping Ideas Quickly<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#11--prototyping-ideas-quickly" class="hash-link" aria-label="Direct link to 11. üõ† Prototyping Ideas Quickly" title="Direct link to 11. üõ† Prototyping Ideas Quickly">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-10">Use Case<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#use-case-10" class="hash-link" aria-label="Direct link to Use Case" title="Direct link to Use Case">‚Äã</a></h3>
<p>I used Goose to build a working prototype and see the full application live in action.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-its-useful-10">Why It's Useful<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#why-its-useful-10" class="hash-link" aria-label="Direct link to Why It's Useful" title="Direct link to Why It's Useful">‚Äã</a></h3>
<p>It's fast, functional, and lets me validate whether an idea is worth pursuing without spending hours coding from scratch.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-try-it-10">How to Try It<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#how-to-try-it-10" class="hash-link" aria-label="Direct link to How to Try It" title="Direct link to How to Try It">‚Äã</a></h3>
<ol>
<li>Enable the <a href="https://block.github.io/goose/extensions/detail?id=developer"><code>Developer</code></a> extension</li>
<li>Prompt Goose:<!-- -->
<blockquote>
<p>Build a JavaScript webcam app with real-time filters</p>
</blockquote>
</li>
</ol>
<p>üé• <strong>See it live:</strong><br>
<!-- -->Watch The Great Goose Off where we challenged Goose to create creative apps from scratch, like:</p>
<ul>
<li>A Goose-shaped drawing tool</li>
<li>A purposely chaotic authentication flow</li>
</ul>
<p>You'll see ideas go from prompt to prototype in one session.</p>
<iframe class="aspect-ratio" src="https://www.youtube.com/embed/OsA3qhns7dg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="looking-for-more-examples">Looking for more examples?<a href="https://block.github.io/goose/blog/2025/04/21/practical-use-cases-of-ai#looking-for-more-examples" class="hash-link" aria-label="Direct link to Looking for more examples?" title="Direct link to Looking for more examples?">‚Äã</a></h2>
<p>This blog post included just a few of the ways I use Goose. If you're curious about what else it can do, check out the <a href="https://block.github.io/goose/prompt-library">Prompt Library</a> or just ask:</p>
<p>What are 5 useful things you can help me with today?</p>
<p>Let Goose surprise you. ‚ú®</p>
]]></content>
        <author>
            <name>Rizel Scarlett</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codename Goose Goes to New York]]></title>
        <id>https://block.github.io/goose/blog/2025/04/17/goose-goes-to-NY</id>
        <link href="https://block.github.io/goose/blog/2025/04/17/goose-goes-to-NY"/>
        <updated>2025-04-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Goose lands in NYC for its second community meetup]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/cover-6c131d275bcdb4d8651a140d62e2975f.png" width="2240" height="1260" class="img_ev3q"></p>
<p>We brought Goose to New York City and it was one for the books.</p>
<p>Over 100 people registered, plus 87 on the waitlist, and we had a packed room full of folks who were curious, thoughtful, and ready to dive in. Some were developers already exploring Goose and MCP, others were totally new to the world of AI agents. That‚Äôs the beauty of Goose, it‚Äôs for developers <em>and</em> non-developers.</p>
<p>The energy was there from the moment the event began - music, pizza, and authentic networking. We had lightning talks, a Goose-themed game, hands-on hacking, and yeah‚Ä¶ a few Ebbs IPAs might‚Äôve ended up in people‚Äôs backpacks by the end of the night.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-we-brought-goose-to-nyc">Why We Brought Goose to NYC<a href="https://block.github.io/goose/blog/2025/04/17/goose-goes-to-NY#why-we-brought-goose-to-nyc" class="hash-link" aria-label="Direct link to Why We Brought Goose to NYC" title="Direct link to Why We Brought Goose to NYC">‚Äã</a></h2>
<p>After the Boston meetup, we wanted to keep the momentum going and test things in a new city. New York felt like the perfect place. It‚Äôs a melting pot of people and has a really strong tech scene. Our goals were simple:</p>
<p>‚úÖ Keep building the Goose community<br>
<!-- -->‚úÖ Get real feedback and ideas from the community in person<br>
<!-- -->‚úÖ Have some fun while learning together</p>
<p>NYC didn‚Äôt disappoint.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="in-case-you-missed-it">In Case You Missed It<a href="https://block.github.io/goose/blog/2025/04/17/goose-goes-to-NY#in-case-you-missed-it" class="hash-link" aria-label="Direct link to In Case You Missed It" title="Direct link to In Case You Missed It">‚Äã</a></h2>
<div class="carousel-container"><div class="swiper swiper-container-test-carousel" style="width:100%"><div class="swiper-wrapper"><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/focus4-8232c187021a690519cfa1e8f1c18014.jpg" alt="Slide 1" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/focus-4927104eb487e6b1f9480d8149e26c36.jpg" alt="Slide 2" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/focus2-4ca4bc40c7a86ec46ec566d4d1fd2001.jpg" alt="Slide 3" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/focus3-8ba8fb623d148fa5583c41c0a7a721a4.jpg" alt="Slide 4" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/focus5-afe81c949e09dc788989d1c20c3a74fe.jpg" alt="Slide 5" class="carousel-image"></div></div><div class="swiper-button-prev"></div><div class="swiper-button-next"></div><div class="swiper-pagination"></div></div></div>
<p>We kicked things off with food and free time to meet people, chat, and ask questions before jumping into the talks:</p>
<ul>
<li><strong><a href="https://www.linkedin.com/in/erinmikail/" target="_blank" rel="noopener noreferrer">Erin Mikail</a></strong> from Galileo ran a Goose-themed game that got people laughing <em>and</em> learning about the importance of agent evaluation.</li>
<li><strong><a href="https://www.linkedin.com/in/ebonylouis/" target="_blank" rel="noopener noreferrer">I, Ebony Louis</a></strong> gave a walkthrough of Goose and MCP, showing how quick it is to get started with any MCP server.</li>
<li><strong><a href="https://www.linkedin.com/in/alexjhancock/" target="_blank" rel="noopener noreferrer">Alex Hancock</a></strong> went deep on MCP, and how it powers secure, extendable agent workflows.</li>
</ul>
<p>Then came the best part ‚Äî hack time. <strong>27 people got Goose up and running live</strong> during the event, which was amazing to see. It‚Äôs always fun watching that moment when it clicks for someone, ideas start flowing, people get inspired, and they walk away ready to actually <em>use</em> Goose.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-people-said">What People Said<a href="https://block.github.io/goose/blog/2025/04/17/goose-goes-to-NY#what-people-said" class="hash-link" aria-label="Direct link to What People Said" title="Direct link to What People Said">‚Äã</a></h2>
<div class="carousel-container"><div class="swiper swiper-container-test-carousel" style="width:100%"><div class="swiper-wrapper"><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/swag2-6ed2a0029c159d14013e366f6f945268.jpg" alt="Slide 1" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/swag1-7e7ee0095446a64f5dbcffe6b5b69460.jpg" alt="Slide 2" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/swag-8eaec6e42aea06511f6334c6e9e21ec1.jpg" alt="Slide 3" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/swag3-50d943bd7ee6e68c65ad0bed5e339f9a.jpg" alt="Slide 4" class="carousel-image"></div></div><div class="swiper-button-prev"></div><div class="swiper-button-next"></div><div class="swiper-pagination"></div></div></div>
<blockquote>
<p>‚ÄúIt took me less than 5 mins to get myself set up with a sample project and running the Goose CLI in GitHub Codespaces! Overall it felt great to be back in a physical venue for a hands-on event with an engaged community and a timely topic for discussion.‚Äù<br>
<!-- -->‚Äî <em><a href="https://www.linkedin.com/in/nityan/" target="_blank" rel="noopener noreferrer">Nitya Narasimhan, Senior Cloud Advocate @ Microsoft</a></em></p>
</blockquote>
<blockquote>
<p>‚ÄúThe live demos, open discussions, and practical exercises made it an exceptional learning experience. Feeling energized and inspired to explore how Goose and MCP can be leveraged in future data engineering projects!‚Äù<br>
<!-- -->‚Äî <em><a href="https://www.linkedin.com/in/manireddy12/" target="_blank" rel="noopener noreferrer">Manikumarreddy Gajjela, Full Stack Developer @ Tetra Computing</a></em></p>
</blockquote>
<blockquote>
<p>‚ÄúEveryone seems bullish on Model Context Protocol (MCP) these days‚Ä¶ Goose is an open-source, on-machine AI agent built to automate your tasks. The coolest part? You can even plug in your own hosted Ollama LLM with Goose!‚Äù<br>
<!-- -->‚Äî <em><a href="https://www.linkedin.com/in/rijuldahiya/" target="_blank" rel="noopener noreferrer">Rijul Dahiya, Graduate Teaching Assistant @ NYU</a></em></p>
</blockquote>
<blockquote>
<p>‚ÄúGreat event ‚Äì great mix of introductory and technical material as well as fun, and I liked that it provided a bunch of time at the beginning and end that was unstructured.‚Äù<br>
<!-- -->‚Äî <em><a href="https://www.linkedin.com/in/matthewhillnewyork/" target="_blank" rel="noopener noreferrer">Matthew Hill, Sr Director of AI Engineering @ Dataminr</a></em></p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="moments-we-loved-Ô∏è">Moments We Loved ‚ù§Ô∏è<a href="https://block.github.io/goose/blog/2025/04/17/goose-goes-to-NY#moments-we-loved-%EF%B8%8F" class="hash-link" aria-label="Direct link to Moments We Loved ‚ù§Ô∏è" title="Direct link to Moments We Loved ‚ù§Ô∏è">‚Äã</a></h2>
<ul>
<li>üçï Pizza, music, and people catching up before things even kicked off</li>
<li>üéÆ The Goose game- yes, it got competitive and oddly dark lol</li>
<li>üß≥ Folks traveled from Philly and DC just to attend</li>
<li>üì∏ Having a photographer to capture candid and fun moments</li>
<li>üß† A bunch of thoughtful ‚ÄúI‚Äôm not a dev but‚Ä¶‚Äù questions that we <em>loved</em> hearing</li>
</ul>
<div class="carousel-container"><div class="swiper swiper-container-test-carousel" style="width:100%"><div class="swiper-wrapper"><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/speaker1-45d20237329fb76d724e73b6ee1f7a89.jpg" alt="Slide 1" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/speaker-bd71c5b83c6e0cd202ea8aa8af867b58.jpg" alt="Slide 2" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/fun-340fa01a11fd04982ae7e2e612bded03.jpg" alt="Slide 3" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/fun1-b0d7060f8629eec662b2c9f5a22dd7d0.jpg" alt="Slide 4" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/focus2-4ca4bc40c7a86ec46ec566d4d1fd2001.jpg" alt="Slide 5" class="carousel-image"></div></div><div class="swiper-button-prev"></div><div class="swiper-button-next"></div><div class="swiper-pagination"></div></div></div>
<p>At the end, people were asking when the next one is and yes, we may have let it slip early‚Ä¶</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="up-next-goose-flies-south-">Up Next: Goose Flies South üõ´<a href="https://block.github.io/goose/blog/2025/04/17/goose-goes-to-NY#up-next-goose-flies-south-" class="hash-link" aria-label="Direct link to Up Next: Goose Flies South üõ´" title="Direct link to Up Next: Goose Flies South üõ´">‚Äã</a></h2>
<p>Our next Goose Meetup is already locked in!</p>
<p>üëâ <strong>Atlanta ‚Äì Wednesday, April 30</strong><br>
<!-- -->üïï <strong>6:00 PM ‚Äì 8:30 PM ET</strong><br>
<!-- -->üìç <a href="https://lu.ma/x9ccqruq" target="_blank" rel="noopener noreferrer">RSVP here</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="big-thanks-">Big Thanks üôå<a href="https://block.github.io/goose/blog/2025/04/17/goose-goes-to-NY#big-thanks-" class="hash-link" aria-label="Direct link to Big Thanks üôå" title="Direct link to Big Thanks üôå">‚Äã</a></h2>
<p>Huge shoutout to <strong><a href="https://www.linkedin.com/in/taniachakraborty/" target="_blank" rel="noopener noreferrer">Tania Chakraborty</a></strong> and <strong><a href="https://www.linkedin.com/in/anthonygiuliano1/" target="_blank" rel="noopener noreferrer">Anthony Giuliano</a></strong> for being there, and to everyone who came through, asked questions, helped out, and made it a night to remember.</p>
<p>The community truly made this one special, people stayed after to chat, helped clean up without being asked, and brought such a good energy into the room. We couldn‚Äôt have asked for a better crowd.</p>
<p>We‚Äôll see you in Atlanta üëÄ</p>
]]></content>
        <author>
            <name>Ebony Louis</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How ATrueLight4 Helped Goose Navigate Windows]]></title>
        <id>https://block.github.io/goose/blog/2025/04/14/community-atruelight4</id>
        <link href="https://block.github.io/goose/blog/2025/04/14/community-atruelight4"/>
        <updated>2025-04-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Block Open Source Top Contributor of the Month]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/goose4win-7f57433fa3f19849e74b18ebffe08bcf.png" width="1206" height="633" class="img_ev3q"></p>
<p>As the goose team continues to work on new features over 800 community members voted to express their need for Goose on Windows. Today's top contributor stepped in to aid this ongoing effort.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="windows-support">Windows Support<a href="https://block.github.io/goose/blog/2025/04/14/community-atruelight4#windows-support" class="hash-link" aria-label="Direct link to Windows Support" title="Direct link to Windows Support">‚Äã</a></h2>
<p>Since the launch of codename goose, the open source community has been wanting and requesting the same automation by goose on Windows.</p>
<p>Currently, goose's CLI version works on Windows with limited built-in extensions via WSL, or Windows Subsystem for Linux. While there is a limited internal beta in the works, there are several bugs and improvements that are being worked on to ensure codename goose has the same seamless experience as it does on Mac.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="atruelight4s-goose4win">ATrueLight4's Goose4Win<a href="https://block.github.io/goose/blog/2025/04/14/community-atruelight4#atruelight4s-goose4win" class="hash-link" aria-label="Direct link to ATrueLight4's Goose4Win" title="Direct link to ATrueLight4's Goose4Win">‚Äã</a></h2>
<p>Our featured contributor, <a href="https://github.com/ATrueLight4" target="_blank" rel="noopener noreferrer">ATrueLight4</a>, shipped <strong>Goose4Win</strong>, a fix that improves how Goose handles Windows-specific file paths. Their contribution is already merged into main, so if you install Goose for CLI on Windows today, you‚Äôll get the improvement out of the box. No extra setup needed.</p>
<p>Thank you so much for your contribution, ATrueLight4! Your work brings us one step closer to Goose on Windows.</p>
<p>To show our deep gratitude for your contribution, we've granted you the exclusive ‚ú®Top Contributor‚ú® badge on the Block Open Source Discord! You'll also be one of the first contributors to receive exclusive codename goose swag. (more info on that to be announced later üëÄü™ø)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-your-own-spotlight">Get Your Own Spotlight<a href="https://block.github.io/goose/blog/2025/04/14/community-atruelight4#get-your-own-spotlight" class="hash-link" aria-label="Direct link to Get Your Own Spotlight" title="Direct link to Get Your Own Spotlight">‚Äã</a></h2>
<p>Interested in contributing to goose and having your contribution featured? Whether it's improving platform support, adding new features, or fixing bugs, we welcome all contributions from the open source community. You can <a href="https://discord.gg/block-opensource" target="_blank" rel="noopener noreferrer">join the Block Open Source Discord</a> or <a href="https://block.github.io/goose/" target="_blank" rel="noopener noreferrer">get started using codename goose</a> today.</p>
]]></content>
        <author>
            <name>Tania Chakraborty</name>
            <uri>https://taniachakraborty.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Finetuning Toolshim Models for Tool Calling]]></title>
        <id>https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim</id>
        <link href="https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim"/>
        <updated>2025-04-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Addressing performance limitations in models without native tool calling support]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/toolshim-header-42611f614e7722f90cf83991debe3046.png" width="1200" height="630" class="img_ev3q"></p>
<p>Our recently published <a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark" target="_blank" rel="noopener noreferrer">Goose benchmark</a> revealed significant performance limitations in models where tool calling is not straightforwardly supported (e.g., Gemma3, Deepseek-r1, phi4). These models often fail to invoke tools at appropriate times or produce malformed or inconsistently formatted tool calls. With the most recent releases of Llama4 and Deepseek v3 (0324), we are again observing challenges with effective tool calling performance, even on these flagship openweight models.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-tool-calling-is-important">Why tool calling is important<a href="https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim#why-tool-calling-is-important" class="hash-link" aria-label="Direct link to Why tool calling is important" title="Direct link to Why tool calling is important">‚Äã</a></h2>
<p>Tool calling is a critical capability for agents like goose. It allows models to go beyond text and image generation and take concrete actions, such as executing code, querying databases, searching the web, or interacting with design tools like Figma. Equipping agents with a broad set of tools empowers them to discover and interface with external systems, much like a human would. While this might be overkill for narrow, more deterministic applications of LLMs, it is essential for general-purpose agents like goose. Without reliable tool calling, we limit what models can do to help us automate, remove toil and navigate complex systems. Pure generation‚Äìof text, images, speech, and video‚Äìis just the first step on the path to more powerful agentic capabilities. There is so much more that models can do if we give them the legs to run.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="background-using-a-local-model-as-a-toolshim">Background: using a local model as a "toolshim"<a href="https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim#background-using-a-local-model-as-a-toolshim" class="hash-link" aria-label="Direct link to Background: using a local model as a &quot;toolshim&quot;" title="Direct link to Background: using a local model as a &quot;toolshim&quot;">‚Äã</a></h2>
<p>The goal is to allow goose to work with the widest variety of models possible. A "toolshim" in this case is a thin layer which sits between the main model doing the agent work, and the tools that can perform actual actions (making the agent take action, vs being a chatbot). Previously we have been trying this approach with open models including in this <a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark" target="_blank" rel="noopener noreferrer">past benchmark</a> post. A toolshim, if it can work, unlocks both powerful cutting edge models (open weight and closed) which while may perform well on various benchmarks, fall well short when tool calling for agents is required (or perhaps don't, by design, support tool calling at all, such as the case with some reasoning models).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="proposal-fine-tune-a-lightweight-toolshim-model-up-to-12b">Proposal: Fine-tune a lightweight toolshim model (up to 12b)<a href="https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim#proposal-fine-tune-a-lightweight-toolshim-model-up-to-12b" class="hash-link" aria-label="Direct link to Proposal: Fine-tune a lightweight toolshim model (up to 12b)" title="Direct link to Proposal: Fine-tune a lightweight toolshim model (up to 12b)">‚Äã</a></h2>
<p>Develop a dedicated toolshim model that translates open-source model outputs into well-structured tool calls, acting as a reliable post-processor to standardize across model families trained that currently exhibit inconsistent and unreliable tool call generation behavior. We do not use tool calling apis even if available, but provide tool context in the system prompts.</p>
<p>We already experimented with this in the <a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark" target="_blank" rel="noopener noreferrer">benchmarking effort</a>, finding that phi4 (14b) and gemma3 (27b) achieved close performance to llama3.3 (70b) when used with a generic local model (mistral-nemo) as the shim. This shows potential for furthering their performance with more focused attention on improving the shim's performance.</p>
<p>Toolshim System Sketch:</p>
<p><img decoding="async" loading="lazy" alt="Toolshim System Sketch" src="https://block.github.io/goose/assets/images/sketch-0bb4b0e6fb7fdbd194fff4db41c3806f.png" width="1132" height="828" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="key-observations-on-current-challenges-with-tool-call-generation">Key Observations on Current Challenges with Tool Call Generation<a href="https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim#key-observations-on-current-challenges-with-tool-call-generation" class="hash-link" aria-label="Direct link to Key Observations on Current Challenges with Tool Call Generation" title="Direct link to Key Observations on Current Challenges with Tool Call Generation">‚Äã</a></h2>
<ol>
<li>
<p><strong>Model training templates are inconsistent</strong><br>
<!-- -->For example, <a href="https://qwen.readthedocs.io/en/latest/framework/function_call.html" target="_blank" rel="noopener noreferrer">Qwen models use</a> <a href="https://github.com/NousResearch/Hermes-Function-Calling" target="_blank" rel="noopener noreferrer">Hermes-style tool formats</a>, while Openhands generates Markdown despite explicit JSON instructions‚Äîsuggesting training data shape can have an underestimated impact on reliable tool call generation</p>
</li>
<li>
<p><strong>Current workarounds aren't enough</strong><br>
<a href="https://docs.vllm.ai/en/latest/features/tool_calling.html" target="_blank" rel="noopener noreferrer">Model providers may implement approaches like guided decoding</a> to guarantee validly-parsable function calls, but these may not produce high-quality outputs if the model wasn't trained on schemas matching what users provide in context. The widespread challenges with tool use with Llama4 may be indicative of the challenges providers have in effectively serving new models to make full use of their capabilities</p>
</li>
<li>
<p><strong>Hosting providers vary wildly in how well they work with tool calls</strong><br>
<!-- -->Hosting providers helpfully provide chat templates or similar which can, in many cases, prompt some of the larger models to reply correctly formatted tool calls, and thus can support openai-like apis where tools are provided, but in practice these can fall short after one shot, or vary a lot between providers (an issue exacerbated if using model routers such as openrouter or huggingface hosted inference)</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="some-examples-of-model-specific-quirks-wrt-tool-calling">Some examples of model-specific quirks wrt tool calling:<a href="https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim#some-examples-of-model-specific-quirks-wrt-tool-calling" class="hash-link" aria-label="Direct link to Some examples of model-specific quirks wrt tool calling:" title="Direct link to Some examples of model-specific quirks wrt tool calling:">‚Äã</a></h3>
<p><strong>Openhands</strong>: Despite instructions to generate JSON-formatted tool calls, still generates markdown (likely due to shape of their training data)</p>
<p><img decoding="async" loading="lazy" alt="Openhands example" src="https://block.github.io/goose/assets/images/openhands-7fe1d878c7108c846e6275ed3157be6e.png" width="1287" height="233" class="img_ev3q"></p>
<p><strong>Llama4 Maverick</strong>: Generates malformed tool calls, but performs somewhat better when specifically prompted to generate tool calls as JSON</p>
<p>With "tool calls" on OpenRouter:<br>
<img decoding="async" loading="lazy" alt="OpenRouter tool calls example" src="https://block.github.io/goose/assets/images/openrouter_toolcalls-01ef22c3d91ff5580c49b89f6599293f.png" width="1295" height="621" class="img_ev3q"></p>
<p>Llama4 Maverick when instead just prompted to generate tool calls in JSON:<br>
<img decoding="async" loading="lazy" alt="Llama4 example" src="https://block.github.io/goose/assets/images/llama4-2ebc0ab8f18d31c450ee2bf34aa82191.png" width="1296" height="767" class="img_ev3q"></p>
<p><strong>Gemma3</strong>: A DeepMind engineer <a href="https://www.philschmid.de/gemma-function-calling" target="_blank" rel="noopener noreferrer">suggested providing a function calling template in-context in Python format</a><br>
<!-- -->The 12B model also outputs valid JSON tool calls reasonably well:<br>
<img decoding="async" loading="lazy" alt="Gemma3 example" src="https://block.github.io/goose/assets/images/gemma3-eca1a363fea57b818a967883e567a481.png" width="1293" height="299" class="img_ev3q"></p>
<p><strong>Functionary models</strong>: <a href="https://github.com/MeetKai/functionary/issues/302#issuecomment-2650187280" target="_blank" rel="noopener noreferrer">Ollama couldn't support the tool calling capabilities</a> because these models were trained with prompt templates in a TypeScript schema incompatible with Ollama's supported JSON schema</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="experimentation-approach">Experimentation Approach<a href="https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim#experimentation-approach" class="hash-link" aria-label="Direct link to Experimentation Approach" title="Direct link to Experimentation Approach">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="data-collection">Data Collection<a href="https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim#data-collection" class="hash-link" aria-label="Direct link to Data Collection" title="Direct link to Data Collection">‚Äã</a></h3>
<ul>
<li>Extract user messages from historical Goose sessions, and for messages followed by tool calls from Anthropic/OpenAI (all tool calls up to today):<!-- -->
<ul>
<li><strong>Regenerate tool calls with open models:</strong> Regenerate the tool calls with the most capable open models that have supported tool calling capabilities (e.g., QwQ, Qwen, deepseek chat v3)</li>
<li><strong>Generate json/markdown-formatted tool calls to parse:</strong> Instruct the most capable open models (e.g., DeepSeek-r1, Llama4, Gemma3), that don't necessarily have strong tool calling to output tool calls in the correct schema (JSON/markdown). Parse the output into the appropriate tool calls.</li>
<li><strong>Discard any malformed tool calls, tool calls that fail to properly execute, or tool calls that meet other rejection criteria</strong></li>
</ul>
</li>
<li>Generate a few thousand examples with this approach</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="modeling">Modeling<a href="https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim#modeling" class="hash-link" aria-label="Direct link to Modeling" title="Direct link to Modeling">‚Äã</a></h3>
<p>Fine tune small models like mistral-nemo (14b), gemma 4-12b, qwen2.5-coder 7-14b.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="evaluations">Evaluations<a href="https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim#evaluations" class="hash-link" aria-label="Direct link to Evaluations" title="Direct link to Evaluations">‚Äã</a></h3>
<p>Test with Goosebench evals run in the benchmarking blogpost. We can directly compare performance of models with and without the finetuned toolshim models supporting them.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="future-approaches">Future approaches<a href="https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim#future-approaches" class="hash-link" aria-label="Direct link to Future approaches" title="Direct link to Future approaches">‚Äã</a></h2>
<p>On top of local models, we would like to consider parsers, parser combinators, context-free grammars and more (even very large ones) which are constructed based on 1000s of examples of tool results. Even if large, these can operate at every low latencies extracting parameters for suggested tool calls. There are likely other structured text extraction techniques to be explored to assist with discovery and extraction of tool calls from rich responses from powerful general models.</p>
]]></content>
        <author>
            <name>Alice Hau</name>
        </author>
        <author>
            <name>Michael Neale</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Visual Guide To MCP Ecosystem]]></title>
        <id>https://block.github.io/goose/blog/2025/04/10/visual-guide-mcp</id>
        <link href="https://block.github.io/goose/blog/2025/04/10/visual-guide-mcp"/>
        <updated>2025-04-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Visual breakdown of MCP: How your AI agent, tools, and models work together.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/mcpblog-40894789122bda594a8576ebcb67a2d8.png" width="2240" height="1260" class="img_ev3q"></p>
<p>You ever open a GitHub repo or blog post, read the first sentence, and immediately feel like you‚Äôve stumbled into a PhD dissertation?</p>
<p>Yeah. Same.</p>
<p>MCP (Model Context Protocol) sounds complicated, but it‚Äôs really not. Think of this as your go to cheat sheet, no whitepapers, no academic jargon, just plain English and a few good visuals.</p>
<p>Let's break this down together.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-mcp-in-plain-english">What Is MCP in Plain English?<a href="https://block.github.io/goose/blog/2025/04/10/visual-guide-mcp#what-is-mcp-in-plain-english" class="hash-link" aria-label="Direct link to What Is MCP in Plain English?" title="Direct link to What Is MCP in Plain English?">‚Äã</a></h2>
<p>MCP is like a universal translator between your AI agent, like Goose, and external tools, files, databases, APIs, you name it.</p>
<p>It gives your agent a way to ask questions, run tools, store/retrieve context, and keep track of everything it knows.</p>
<p>Instead of cramming everything into one prompt like ‚Äúhere‚Äôs 10k tokens worth of context, good luck,‚Äù MCP helps the model pull what it needs, when it needs it.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="who-are-the-players">Who Are The Players?<a href="https://block.github.io/goose/blog/2025/04/10/visual-guide-mcp#who-are-the-players" class="hash-link" aria-label="Direct link to Who Are The Players?" title="Direct link to Who Are The Players?">‚Äã</a></h2>
<p><img decoding="async" loading="lazy" alt="players" src="https://block.github.io/goose/assets/images/players-e2b075360b81c342d61ed84bc51c1e97.png" width="2320" height="818" class="img_ev3q"></p>
<ul>
<li>
<p><strong>User</strong> ‚Äì You, the person with the big ideas and messy problems</p>
</li>
<li>
<p><strong>Agent</strong> ‚Äì The AI agent, Goose, living in your CLI, IDE, or desktop application</p>
</li>
<li>
<p><strong>LLM</strong> ‚Äì The model that does the reasoning (like Claude, GPT-4, etc.)</p>
</li>
<li>
<p><strong>MCP Servers (Extensions)</strong> ‚Äì Goose's toolbox: built-in and custom extensions that give goose the ability to execute tasks</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-they-communicate">How Do They Communicate?<a href="https://block.github.io/goose/blog/2025/04/10/visual-guide-mcp#how-do-they-communicate" class="hash-link" aria-label="Direct link to How Do They Communicate?" title="Direct link to How Do They Communicate?">‚Äã</a></h2>
<p>Lets take a look at how all the players work together:</p>
<p><img decoding="async" loading="lazy" alt="Visual guide" src="https://block.github.io/goose/assets/images/visualguide-9b44af19be52631e84712cad31849bee.png" width="1056" height="1516" class="img_ev3q">
In this flow, the user kicks things off by giving Goose a prompt. Goose gets the prompt ready, along with its available tools and any relevant context, and hands it off to the LLM. The LLM decides which tools it needs to complete the task. Goose then routes those tool calls to the right MCP servers, and they execute the tasks. As steps of the task are being completed, informs you, the user, of what it's done and can also loop with the LLM as needed.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="heres-an-analogy">Here's An Analogy<a href="https://block.github.io/goose/blog/2025/04/10/visual-guide-mcp#heres-an-analogy" class="hash-link" aria-label="Direct link to Here's An Analogy" title="Direct link to Here's An Analogy">‚Äã</a></h2>
<p>Let‚Äôs make this even clearer with a James Bond analogy. Sometimes a story makes it all click.</p>
<p><img decoding="async" loading="lazy" alt="james bond" src="https://block.github.io/goose/assets/images/james-89c46143c593bee36832667ded97233c.png" width="1266" height="844" class="img_ev3q"></p>
<p>If you‚Äôve ever seen a James Bond movie, you know the scene,
Bond walks into Q‚Äôs lab before the mission.
Q opens up the suitcase of gadgets, exploding pens, invisible cars, grappling watches, you name it.</p>
<p>Goose is <em>like</em> Q in this situation.
The suitcase is already packed with tools, built-in and custom extensions (MCP servers).</p>
<p>Before the LLM (Bond) starts the mission, Goose gives it the full briefing:</p>
<blockquote>
<p><em>"Here‚Äôs your target (the prompt). Here‚Äôs your gadget suitcase (the extensions you can use). Good luck."</em></p>
</blockquote>
<p>The MCP servers?</p>
<p>That‚Äôs the hidden team in the back actually building the gadgets and handing them over when Bond needs them in the field.</p>
<p>The LLM (Bond) picks the right gadgets for the mission, Goose routes the request to the right MCP server, MCP makes sure they work, and the whole operation runs smoothly.</p>
<p>Without Goose handing over the gadget suitcase, the model would just show up in the field with nothing but a tuxedo and a smile, and we don't want to know how that ends.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="your-turn">Your Turn<a href="https://block.github.io/goose/blog/2025/04/10/visual-guide-mcp#your-turn" class="hash-link" aria-label="Direct link to Your Turn" title="Direct link to Your Turn">‚Äã</a></h2>
<p>Now that you‚Äôve got the basics down, and you understand how the MCP ecosystem works, it‚Äôs time to try it yourself.</p>
<p>The <a href="https://block.github.io/goose/docs/quickstart">Quickstart Guide</a> walks you through connecting your first MCP server.</p>
<p>And when you‚Äôre ready to explore more, head over to the <a href="https://block.github.io/goose/docs/category/tutorials">tutorials section</a> in the docs ‚Äî it has step-by-step guides and short video demos to show you how to connect to a variety of MCP servers.</p>
<p>And don't forget to <a href="https://discord.gg/block-opensource" target="_blank" rel="noopener noreferrer">join the community</a> to see what others are building, ask questions, or to simply connect.</p>
]]></content>
        <author>
            <name>Ebony Louis</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Vibe Code Responsibly (with Goose)]]></title>
        <id>https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly</id>
        <link href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly"/>
        <updated>2025-04-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Vibe coding feels magical until it isn't. Learn how to flow with Goose while protecting your code, your team, and your future self.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/responsible-vibe-code-a77f5e24a879edda943cc76f1fc0bd2a.png" width="2240" height="1260" class="img_ev3q"></p>
<p>On Feb 2, 2025, Andrej Karpathy coined the phrase "<a href="https://x.com/karpathy/status/1886192184808149383" target="_blank" rel="noopener noreferrer">vibe coding</a>". Vibe coding represents a new approach to coding where developers ask an AI agent to build something, and they go with the flow.</p>
<p>The <a href="https://modelcontextprotocol.io/introduction" target="_blank" rel="noopener noreferrer">Model Context Protocol (MCP)</a> makes this practice possible. Before MCP, developers copied and pasted context between applications. This workflow fell short of the promised AI agent automation that everyone claimed. Today, AI agents can work autonomously using MCP and integrate with any application, from GitHub to Cloudflare, YouTube, and Figma.</p>
<p>This shift democratizes coding. For example, it's empowered:</p>
<ul>
<li>Web developers to create video games with Unity</li>
<li>Designers and product managers to prototype full-stack applications</li>
<li>Business owners to transform their visions into functional products</li>
</ul>
<p>It's a freeing experience. But too often, we're <a href="https://www.britannica.com/topic/Icarus-Greek-mythology" target="_blank" rel="noopener noreferrer">Icarus</a> with the keyboard, vibe coding too close to the sun.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-dark-side-of-vibe-coding">The Dark Side of Vibe Coding<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#the-dark-side-of-vibe-coding" class="hash-link" aria-label="Direct link to The Dark Side of Vibe Coding" title="Direct link to The Dark Side of Vibe Coding">‚Äã</a></h2>
<p>This creative freedom comes with significant risks. Many developers have encountered serious issues while vibe coding:</p>
<ul>
<li>Committing code with security vulnerabilities</li>
<li>Introducing difficult-to-fix bugs on top of "spaghetti" code</li>
<li>Losing weeks or months of work due to lack of version control</li>
<li>Accidentally exposing sensitive information like environment variables and API keys in production</li>
</ul>
<blockquote class="twitter-tweet" data-dnt="true" align="center"><p lang="en" dir="ltr">Today was the worst day ever‚òπÔ∏è<br>The project I had been working on for the last two weeks got corrupted, and everything was lost. Just like that, my SaaS was gone. Two weeks of hard work, completely ruined.<br>But!!!<br>I started from scratch and have already completed 50% of the work‚Ä¶</p>‚Äî CC Anuj (@vid_anuj) <a href="https://twitter.com/vid_anuj/status/1902379748501880934?ref_src=twsrc%5Etfw">March 19, 2025</a></blockquote>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-better-way-to-vibe-code-with-goose">A Better Way to Vibe Code with Goose<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#a-better-way-to-vibe-code-with-goose" class="hash-link" aria-label="Direct link to A Better Way to Vibe Code with Goose" title="Direct link to A Better Way to Vibe Code with Goose">‚Äã</a></h2>
<p><a href="https://block.github.io/goose" target="_blank" rel="noopener noreferrer">Goose</a> is an open source AI agent local to your machine with built-in features for safe vibe coding.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Most folks define "vibe coding" as purely chaotic development with no rules. I'm redefining it as flowing with AI while protecting your project, team, and future self.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-use-gooseignore-to-protect-sensitive-files">1. Use <code>.gooseignore</code> to Protect Sensitive Files<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#1-use-gooseignore-to-protect-sensitive-files" class="hash-link" aria-label="Direct link to 1-use-gooseignore-to-protect-sensitive-files" title="Direct link to 1-use-gooseignore-to-protect-sensitive-files">‚Äã</a></h3>
<p>Goose supports <a href="https://block.github.io/goose/docs/guides/using-gooseignore" target="_blank" rel="noopener noreferrer"><code>.gooseignore</code></a> files. The concept is similar to <code>.gitignore</code> files for your AI agent. It defines which files and folders Goose should <em>not</em> read, modify, or interact with.</p>
<p>Use this when you want to prevent:</p>
<ul>
<li>Accidental changes to environment variables</li>
<li>Modifications to sensitive configs</li>
<li>Changes to test fixtures or snapshots</li>
<li>Edits to infrastructure and deployment configs</li>
<li>Changes to code examples or documentation</li>
<li>Shell commands running in places they shouldn't</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-create-a-plan">2. Create a plan<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#2-create-a-plan" class="hash-link" aria-label="Direct link to 2. Create a plan" title="Direct link to 2. Create a plan">‚Äã</a></h3>
<p>Goose's <a href="https://block.github.io/goose/docs/guides/goose-cli-commands#examples" target="_blank" rel="noopener noreferrer"><code>/plan</code></a> command helps you align with your agent before any code is touched, giving you a clear understanding of what it intends to do and how it will do it.</p>
<p>This is especially useful for tasks that span multiple files, involve side effects, or could impact critical areas of your codebase. No more guesswork‚Äîjust a structured breakdown you can review and approve.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-choose-the-right-mode-for-the-job">3. Choose the Right Mode for the Job<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#3-choose-the-right-mode-for-the-job" class="hash-link" aria-label="Direct link to 3. Choose the Right Mode for the Job" title="Direct link to 3. Choose the Right Mode for the Job">‚Äã</a></h3>
<p>While letting your AI agent take the lead is fun, not every moment calls for full autonomy. Sometimes, you need to pause, review, or plan before any code changes. Goose offers several <a href="https://block.github.io/goose/docs/guides/goose-permissions" target="_blank" rel="noopener noreferrer">modes</a> that help you stay in control without breaking your momentum. Here's how to use them intentionally during your sessions:</p>
<ul>
<li>
<p><strong>Chat Mode</strong><br>
<!-- -->Goose will only respond with text so that you can brainstorm together.</p>
</li>
<li>
<p><strong>Approval Mode</strong><br>
<!-- -->Before Goose executes an action, it asks for your approval. This is helpful when you want to keep building fast but still want to know what's about to happen before it does.</p>
</li>
<li>
<p><strong>Smart Approval</strong><br>
<!-- -->In this mode, Goose requests your approval for risky actions. This mode is helpful for prototyping quickly while keeping guardrails in place.</p>
</li>
<li>
<p><strong>Autonomous Mode</strong><br>
<!-- -->In this mode, Goose moves forward without asking for approval. Using this mode is best if you feel confident in the direction and have safety nets in place.</p>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-use-version-control-religiously">4. Use Version Control Religiously<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#4-use-version-control-religiously" class="hash-link" aria-label="Direct link to 4. Use Version Control Religiously" title="Direct link to 4. Use Version Control Religiously">‚Äã</a></h3>
<p>There are moments when AI agents change too many files and lines that the Control + Z can't fix. It's best to commit to every change that you or Goose make to get recovery points, clear diffs, and the ability to revert quickly.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-ask-questions-and-think-critically">5. Ask Questions and Think Critically<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#5-ask-questions-and-think-critically" class="hash-link" aria-label="Direct link to 5. Ask Questions and Think Critically" title="Direct link to 5. Ask Questions and Think Critically">‚Äã</a></h3>
<p>Even if you're vibe coding, don't turn off your brain.</p>
<p>Ask Goose:</p>
<ul>
<li>Why did you make this change?</li>
<li>Is this secure?</li>
<li>How are we handling secrets?</li>
<li>Is this the best way to structure the database?</li>
</ul>
<p>By pushing your agent to explain itself, you'll build a better product and learn more along the way.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="6-define-goosehints-for-better-context">6. Define .goosehints for Better Context<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#6-define-goosehints-for-better-context" class="hash-link" aria-label="Direct link to 6. Define .goosehints for Better Context" title="Direct link to 6. Define .goosehints for Better Context">‚Äã</a></h3>
<p>The <a href="https://block.github.io/goose/docs/guides/using-goosehints" target="_blank" rel="noopener noreferrer">.goosehints</a> file gives Goose additional context about your project's coding standards, architectural preferences, and security practices.</p>
<p>Here are a few examples:</p>
<ul>
<li>"Never expose API keys."</li>
<li>"Use prepared statements for database queries."</li>
<li>"Avoid using eval or unsafe dynamic code."</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="7-integrate-goose-into-your-cicd">7. Integrate Goose into Your CI/CD<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#7-integrate-goose-into-your-cicd" class="hash-link" aria-label="Direct link to 7. Integrate Goose into Your CI/CD" title="Direct link to 7. Integrate Goose into Your CI/CD">‚Äã</a></h3>
<p>Before issues hit production, add <a href="https://block.github.io/goose/docs/tutorials/cicd" target="_blank" rel="noopener noreferrer">Goose to your CI/CD pipeline</a> to:</p>
<ul>
<li>Automate code reviews</li>
<li>Validate documentation</li>
<li>Run security checks</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="8-use-an-allowlist-to-block-unsafe-mcp-servers">8. Use an Allowlist to Block Unsafe MCP Servers<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#8-use-an-allowlist-to-block-unsafe-mcp-servers" class="hash-link" aria-label="Direct link to 8. Use an Allowlist to Block Unsafe MCP Servers" title="Direct link to 8. Use an Allowlist to Block Unsafe MCP Servers">‚Äã</a></h3>
<p>Some MCP servers can introduce security risks, especially if compromised.</p>
<p>Use the Goose <a href="https://github.com/block/goose/blob/main/crates/goose-server/ALLOWLIST.md" target="_blank" rel="noopener noreferrer">allowlist</a> feature to prevent Goose from calling unsafe or untrusted tools.</p>
<p>Here's how the team at Block is thinking about <a href="https://block.github.io/goose/blog/2025/03/31/securing-mcp" target="_blank" rel="noopener noreferrer">securing the MCP</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="9-pick-a-high-performing-llm">9. Pick a High-Performing LLM<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#9-pick-a-high-performing-llm" class="hash-link" aria-label="Direct link to 9. Pick a High-Performing LLM" title="Direct link to 9. Pick a High-Performing LLM">‚Äã</a></h3>
<p>Not all LLMs are built the same. Goose plays best with:</p>
<ul>
<li>Claude Sonnet 3.5</li>
<li>GPT-4o</li>
</ul>
<p>Lower-performing models might work, but they're more likely to hallucinate or misunderstand your goals. Read more about how <a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark/" target="_blank" rel="noopener noreferrer">different LLM's perform with Goose</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="watch-vibe-coding-in-action">Watch Vibe Coding in Action<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#watch-vibe-coding-in-action" class="hash-link" aria-label="Direct link to Watch Vibe Coding in Action" title="Direct link to Watch Vibe Coding in Action">‚Äã</a></h2>
<p>Here‚Äôs how folks vibe code with Goose:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/xZo3aA-vFi4?si=14bVczrCUwdKBZyg" title="The Great Great Off" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="final-thoughts">Final Thoughts<a href="https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly#final-thoughts" class="hash-link" aria-label="Direct link to Final Thoughts" title="Direct link to Final Thoughts">‚Äã</a></h2>
<p>Vibe coding isn't inherently wrong. It's marks a new chapter in how we build, and it opens the door for everyone. But experienced developers have a responsibility to define what smart, safe vibe coding looks like. Goose gives us the tools to set that standard, so the whole community can code creatively without sacrificing quality.</p>
<p>Download <a href="https://block.github.io/goose/docs/getting-started/installation/" target="_blank" rel="noopener noreferrer">Goose</a>, and start vibe coding with intention today!</p>
]]></content>
        <author>
            <name>Rizel Scarlett</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Top 5 MCP Servers I Use as a Developer with Goose]]></title>
        <id>https://block.github.io/goose/blog/2025/04/01/top-5-mcp-servers</id>
        <link href="https://block.github.io/goose/blog/2025/04/01/top-5-mcp-servers"/>
        <updated>2025-04-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[These 5 MCP servers help me automate my workflow and make me a better developer.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/mcp-servers-cover-99742334f4c2581d18eb092cd0c737f9.png" width="2240" height="1260" class="img_ev3q"></p>
<p>As a developer, finding the right tools that seamlessly work together can feel like discovering a superpower. And when you have a working process, it can sometimes be difficult to try out new tools.</p>
<p>With the introduction of MCPs, AI agents like Goose are able to plug in to my existing tools, and the only thing that changes with my workflow is that much welcomed automation that comes with it. I still do the same things I do, but backed by AI, I can now do them faster and with more confidence.</p>
<p>Today, I'm excited to share not just my favorite MCP servers, but the ones I actually use almost everyday with real applications that you can probably relate to as well.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>You can ask Goose what you can do with an extension to get a list of all the features and example use cases you can try out.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="github-mcp-server-everything-github">GitHub MCP Server: Everything GitHub<a href="https://block.github.io/goose/blog/2025/04/01/top-5-mcp-servers#github-mcp-server-everything-github" class="hash-link" aria-label="Direct link to GitHub MCP Server: Everything GitHub" title="Direct link to GitHub MCP Server: Everything GitHub">‚Äã</a></h2>
<p>The <a href="https://block.github.io/goose/docs/tutorials/github-mcp">GitHub MCP Server</a> comes with quite a lot of functionality. It can help you create issues, pull requests, repositories, and branches. My most frequent use case for the GitHub MCP is reviewing and understanding pull requests.</p>
<p>For cases when it's a large pull request, or I don't understand what is going on, I can pass the PR to Goose, giving it the right context to make me understand and then act on the pull request. I'm even able to create a documentation update or changelog update from the file changes in the PR. This is definitely one of my favorite things.</p>
<p>E.g</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Hey Goose, this pull request https://github.com/block/goose/pull/1949, has a lot of changes. Can you summarize into a changelog for me?</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="knowledge-graph-memory-context-on-steroids">Knowledge Graph Memory: Context on Steroids<a href="https://block.github.io/goose/blog/2025/04/01/top-5-mcp-servers#knowledge-graph-memory-context-on-steroids" class="hash-link" aria-label="Direct link to Knowledge Graph Memory: Context on Steroids" title="Direct link to Knowledge Graph Memory: Context on Steroids">‚Äã</a></h2>
<p>The <a href="https://block.github.io/goose/docs/tutorials/knowledge-graph-mcp">Knowledge Graph Memory</a> extension is like giving Goose a photographic memory of your project or data. Like the name implies, it creates a graph of any information fed into it, connecting the dots between different pieces of information or as I like to use it for - documentation.</p>
<p>If I'm working on a specific project or library and I don't want any hallucinations, I am able to feed Goose with the right context and it will be able to answer questions about the project or library with the right context.</p>
<p>This could be documentation of the project I'm currently working on, or even documentation of a library I'm using.</p>
<p>E.g</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">I'm currently in a project called Goose, read through the documentation in `documentation/docs/` folder and store key information in the knowledge graph. Use it for reference anytime I ask you about Goose.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fetch-extension-the-web-in-our-hands">Fetch Extension: The Web in our Hands<a href="https://block.github.io/goose/blog/2025/04/01/top-5-mcp-servers#fetch-extension-the-web-in-our-hands" class="hash-link" aria-label="Direct link to Fetch Extension: The Web in our Hands" title="Direct link to Fetch Extension: The Web in our Hands">‚Äã</a></h2>
<p>I had a slightly hard time deciding between the <a href="https://block.github.io/goose/docs/tutorials/tavily-mcp">Tavily Web Search Extension</a> and The <a href="https://block.github.io/goose/docs/tutorials/fetch-mcp">Fetch Extension</a> because while I do use them both to access the web, the Fetch extension works more like default for me. With the example above using the Knowledge graph, I'm able to get information from the internet to give Goose additional context to work with.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The Tavily Web Search Extension has deep research capabilities and is great for finding specific information, while the Fetch Extension is more about general web access and data retrieval.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="memory-extension-my-habits-and-preferences">Memory Extension: My Habits and Preferences<a href="https://block.github.io/goose/blog/2025/04/01/top-5-mcp-servers#memory-extension-my-habits-and-preferences" class="hash-link" aria-label="Direct link to Memory Extension: My Habits and Preferences" title="Direct link to Memory Extension: My Habits and Preferences">‚Äã</a></h2>
<p>I use the <a href="https://block.github.io/goose/docs/tutorials/memory-mcp">Memory Extension</a> to remind Goose about my general preferences as I work - to default to JavaScript or Node when trying out new prototypes, if I prefer one naming convention or the other - maybe even how I like my coffee <!-- -->:D<!-- -->.</p>
<p>This works differently from the Knowledge Graph extension even though they both store information locally. When combined with the Knowledge Graph, it can also help maintain a clear trail of technical decisions and their rationale. For example I got stuck on a code migration and asked Goose to remember where we stopped, what we've tried so far, and what we want to do next for when I start a new session.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="vs-code-extension-your-favorite-editor-connected">VS Code Extension: Your Favorite Editor, Connected<a href="https://block.github.io/goose/blog/2025/04/01/top-5-mcp-servers#vs-code-extension-your-favorite-editor-connected" class="hash-link" aria-label="Direct link to VS Code Extension: Your Favorite Editor, Connected" title="Direct link to VS Code Extension: Your Favorite Editor, Connected">‚Äã</a></h2>
<p>One of the biggest points in conversations with people especially around vibe coding, is finding ways to track what changes are being made. While version control is always recommended, sometimes I want to be able to stop or change direction before going too far. The <a href="https://block.github.io/goose/docs/tutorials/vscode-mcp">VS Code Extension</a> alongside other features, allows me to preview the diff of my code changes before I commit them.</p>
<p>I can choose to accept or refuse these changes, or tell Goose to try something else before any actual changes are made.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-power-of-integration">The Power of Integration<a href="https://block.github.io/goose/blog/2025/04/01/top-5-mcp-servers#the-power-of-integration" class="hash-link" aria-label="Direct link to The Power of Integration" title="Direct link to The Power of Integration">‚Äã</a></h2>
<p>As mentioned at the beginning of this post, the best thing about these MCP servers is how they plug into my existing workflow. I am able to:</p>
<ul>
<li>Start a new session on Goose which opens the current folder as a project in VS Code.</li>
<li>Start work on any changes and get any context I need from either the Knowledge Graph or from the internet using the Fetch extension.</li>
<li>Any attempts at making changes takes my preferences from the Memory extension into account.</li>
<li>I can then review these changes right in VS Code and either accept or reject them.</li>
<li>And complete the task by asking Goose to create a pull request for me.</li>
</ul>
<p>This is a simplified example of how I use these extensions together - I may not use all of them in every session, but having them available sure makes my workflow much smoother.</p>
<p>What are your favorite MCP servers? How do you use them together? Share your experiences with us on <a href="https://discord.gg/block-opensource" target="_blank" rel="noopener noreferrer">Discord server</a>!</p>
]]></content>
        <author>
            <name>Adewale Abati</name>
            <uri>https://adewaleabati.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MCP Explained for Non-Developers]]></title>
        <id>https://block.github.io/goose/blog/2025/04/01/mcp-nondevs</id>
        <link href="https://block.github.io/goose/blog/2025/04/01/mcp-nondevs"/>
        <updated>2025-04-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn what Model Context Protocol (MCP) is and how anyone can use it to save time on tasks.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/mcp_nondevs-5ce7f39de923cab01de6e14e5dc06744.png" width="1206" height="633" class="img_ev3q"></p>
<p>MCP this, MCP that, what exactly is it, and can you use them if you're not a developer? ü§î</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-mcp">What is MCP?<a href="https://block.github.io/goose/blog/2025/04/01/mcp-nondevs#what-is-mcp" class="hash-link" aria-label="Direct link to What is MCP?" title="Direct link to What is MCP?">‚Äã</a></h2>
<p>MCP stands for <a href="https://modelcontextprotocol.io/introduction" target="_blank" rel="noopener noreferrer">Model Context Protocol</a>, an open standard created by Anthropic.</p>
<p>Let's say you're looking for ways to use AI at work to become more efficient and save as much time as possible. So you go off and learn about large language models (LLMs) like OpenAI or Claude, and start chatting with one. It's amazing being able to chat with AI and have it instantly answer questions or have it tell you how to do something, but how about getting the AI to do stuff for you?</p>
<p>Now there are AI agents, or AI assistants, that can take actions and make decisions for you. But in order to have your AI agent interact with your systems, like Google Drive, Asana, or Slack, there wasn't a standard way to do it. At least not without figuring it out from scratch each time you needed your AI agent to work with what you need it to work with. That's super tedious.</p>
<p>That's exactly where MCP comes in. Best part is, you don't need to be a developer to start using them! MCP essentially allows you to give AI agents access to your external systems without having to code. You can think of MCP as the connector for a system and your AI agent, or like the USB-C of AI integrations.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="mcp-servers-you-should-try-right-now">MCP Servers You Should Try Right Now<a href="https://block.github.io/goose/blog/2025/04/01/mcp-nondevs#mcp-servers-you-should-try-right-now" class="hash-link" aria-label="Direct link to MCP Servers You Should Try Right Now" title="Direct link to MCP Servers You Should Try Right Now">‚Äã</a></h2>
<p>So what can you connect your AI agent to? MCP Servers! MCP servers give your agent access to your tools. With <a href="https://glama.ai/mcp/servers" target="_blank" rel="noopener noreferrer">over 3000 MCP servers</a> you can connect to, here is your top list of popular MCP servers you should try:</p>
<ul>
<li><strong><a href="https://block.github.io/goose/docs/tutorials/google-drive-mcp">Google Drive</a></strong>: File access and search capabilities for Google Drive</li>
<li><strong><a href="https://block.github.io/goose/docs/tutorials/youtube-transcript">YouTube Transcript</a></strong>: Grab and work with YouTube video transcripts</li>
<li><strong><a href="https://block.github.io/goose/docs/tutorials/google-maps-mcp">Google Maps</a></strong>: Location services, directions, and place details</li>
<li><strong><a href="https://block.github.io/goose/docs/tutorials/tavily-mcp">Tavily Web Search</a></strong>: Web and local search using Tavily's Search API</li>
<li><strong><a href="https://block.github.io/goose/docs/tutorials/asana-mcp">Asana</a></strong>: View asana tasks, projects, workspaces, and/or comments</li>
<li><strong><a href="https://block.github.io/goose/docs/tutorials/speech-mcp">Speech</a></strong>: Real-time voice interaction, audio/video transcription, text-to-speech conversion and more</li>
<li><strong><a href="https://block.github.io/goose/docs/tutorials/github-mcp">GitHub</a></strong>: Tools to read, search, and manage Git repositories</li>
<li><strong><a href="https://block.github.io/goose/docs/tutorials/fetch-mcp">Fetch</a></strong>: Web content fetching and conversion for efficient LLM usage</li>
</ul>
<p>This quick list should give you an idea of all the ways you can now use AI agents with your workflow. You can also explore community favorites in <a href="https://dev.to/techgirl1908/my-favorite-mcp-directories-573n" target="_blank" rel="noopener noreferrer">handy MCP directories</a>, and learn <a href="https://block.github.io/goose/blog/2025/03/26/mcp-security">how to check MCP servers are safe</a> before installing.</p>
<p>You can also check out these <a href="https://block.github.io/goose/docs/category/tutorials">Goose tutorials</a>, showing you exactly how you can use some of these popular MCP servers with Goose, or use <a href="https://block.github.io/goose/docs/tutorials/tutorial-extension">Goose's Tutorial extension</a> to get extra help walking you through using or building extensions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="example-mcp-prompts">Example MCP Prompts<a href="https://block.github.io/goose/blog/2025/04/01/mcp-nondevs#example-mcp-prompts" class="hash-link" aria-label="Direct link to Example MCP Prompts" title="Direct link to Example MCP Prompts">‚Äã</a></h2>
<p>Now that you've caught a glimpse of some of the MCP servers that out there, how do you make sure you're using MCPs with AI agents the best you can? This is where prompts come in.</p>
<p>Prompts are ultimately the text you input when interacting with an AI assistant, and prompts can range from super simple questions to detailed instructions! Here are some example prompts you can ask an AI agent like Goose right now that use some of the MCP servers mentioned above:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="google-maps">Google Maps<a href="https://block.github.io/goose/blog/2025/04/01/mcp-nondevs#google-maps" class="hash-link" aria-label="Direct link to Google Maps" title="Direct link to Google Maps">‚Äã</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Google Maps: Track the live GPS location of driver ID #{driver_id}. Query Google Maps for real-time traffic data and adjust the estimated delivery time if delays exceed 5 minutes. If ETA changes, update the customer's live tracker and send an SMS notification. If the delay is greater than 20 minutes, check if another driver within a 1-mile radius can take over the delivery.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="youtube-transcript">YouTube Transcript<a href="https://block.github.io/goose/blog/2025/04/01/mcp-nondevs#youtube-transcript" class="hash-link" aria-label="Direct link to YouTube Transcript" title="Direct link to YouTube Transcript">‚Äã</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">YouTube Transcript: Get the transcript from this youtube video [link to video]. Then, summarize it into a blog post.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="google-drive">Google Drive<a href="https://block.github.io/goose/blog/2025/04/01/mcp-nondevs#google-drive" class="hash-link" aria-label="Direct link to Google Drive" title="Direct link to Google Drive">‚Äã</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">I have an important marketing budget review meeting in 30 minutes and I need your help getting prepared. I have several documents in my Google Drive from our previous meetings and planning sessions. Could you help me by:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1. Finding all relevant documents about our marketing budget and performance</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2. Giving me a quick summary of our Q1 performance</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3. Highlighting the key decisions we need to make about the marketing automation tool and video production</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4. Identifying any outstanding action items from our last meeting</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="asana">Asana<a href="https://block.github.io/goose/blog/2025/04/01/mcp-nondevs#asana" class="hash-link" aria-label="Direct link to Asana" title="Direct link to Asana">‚Äã</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Asana: Create a new task in my Asana workspace called 'Review Q4 metrics' and set the due date to next Friday. Then, find all tasks assigned to me that are due this week and summarize them.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="github">GitHub<a href="https://block.github.io/goose/blog/2025/04/01/mcp-nondevs#github" class="hash-link" aria-label="Direct link to GitHub" title="Direct link to GitHub">‚Äã</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">GitHub: Create a new branch called hello-world in my angiejones/goose-demo repository. Update the README.md file to say "this was written by goose" and commit it. Open a pull request with your changes.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To see more examples just like this, along with the results you can get, check out this <a href="https://block.github.io/goose/prompt-library" target="_blank" rel="noopener noreferrer">Prompt Library</a>! This is your central directory for discovering and using effective prompts with Goose.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-possibilities-are-endless">The Possibilities Are Endless<a href="https://block.github.io/goose/blog/2025/04/01/mcp-nondevs#the-possibilities-are-endless" class="hash-link" aria-label="Direct link to The Possibilities Are Endless" title="Direct link to The Possibilities Are Endless">‚Äã</a></h2>
<p>While some are developed by official providers, a vast majority of MCP servers you see are actually developed by community members! Plus, because MCP is an open standard, anyone can build an MCP server for any resource. You could even use Goose to help you build one!</p>
<p>Hopefully now, instead of spending hours manually gathering data and creating your next marketing report, or manually sorting through your todo-backlog on a Monday, you will use MCP with Goose and have it done for you in minutes.</p>
<p><em>To learn more about using MCP servers and Goose, check out the <a href="https://block.github.io/goose/docs/category/getting-started" target="_blank" rel="noopener noreferrer">Goose documentation</a>, or join the <a href="https://discord.gg/block-opensource" target="_blank" rel="noopener noreferrer">Block Open Source Discord</a> to connect with other open source community members.</em></p>
]]></content>
        <author>
            <name>Tania Chakraborty</name>
            <uri>https://taniachakraborty.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Community-Inspired Benchmarking: The Goose Vibe Check]]></title>
        <id>https://block.github.io/goose/blog/2025/03/31/goose-benchmark</id>
        <link href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark"/>
        <updated>2025-03-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[See how open source AI models measure up in our first Goose agent benchmark tests]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/goose-benchmark-d9726c203290ef892fe3fe3adc7d898f.png" width="1200" height="630" class="img_ev3q"></p>
<p>We've been measuring Goose's performance with various AI models, including a variety of popular open-source models that can run locally on consumer hardware (RTX 4080, Mac M-series). We understand that many in our community value a fully open-source, local experience without relying on cloud services.</p>
<p>This blog shares our findings comparing open-source models against their closed counterparts, highlighting both current performance gaps and paths for future improvement. Our benchmark is still in its early stages, but we wanted to release it as a starting point for distinguishing models that exhibit stronger agentic capabilities by their ability to pilot Goose (distinct from reasoning or other capabilities often captured in other popular benchmarks).</p>
<p>Our evaluations are inspired by grassroots efforts we've seen in communities like <a href="https://www.reddit.com/r/LocalLLaMA/" target="_blank" rel="noopener noreferrer">r/LocalLlama</a>. If you've spent time there, you‚Äôve probably seen enthusiasts crowdsource model performance on standard tasks like "build a flappy bird game" or <a href="https://www.reddit.com/r/LocalLLaMA/comments/1j7r47l/i_just_made_an_animation_of_a_ball_bouncing/" target="_blank" rel="noopener noreferrer">create a rotating hexagon with a bouncing ball</a>" to quickly compare model performance.</p>
<p>These community evals aren't the rigorous, peer-reviewed benchmarks that research labs publish in academic papers. However, they help provide quick, intuitive assessments of capabilities across different models and versions.</p>
<p>In this spirit, we're introducing our <strong>Goose Vibe Check</strong> leaderboard.</p>
<p>Thank you to the Ollama team for their help and support in our experimentation contributing to this blog! We used Ollama‚Äôs <a href="https://ollama.com/blog/structured-outputs" target="_blank" rel="noopener noreferrer">structured outputs</a> feature to enable our <a href="https://block.github.io/goose/docs/guides/experimental-features/#ollama-tool-shim" target="_blank" rel="noopener noreferrer">toolshim implementation</a> (more below) and their recently released <a href="https://github.com/ollama/ollama/blob/main/docs/faq.md#how-can-i-specify-the-context-window-size" target="_blank" rel="noopener noreferrer">context length parameter override</a> to enable testing on longer contexts.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="leaderboard">Leaderboard<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#leaderboard" class="hash-link" aria-label="Direct link to Leaderboard" title="Direct link to Leaderboard">‚Äã</a></h2>
<table><thead><tr><th>Rank</th><th>Model</th><th>Average Eval Score</th><th>Inference Provider</th></tr></thead><tbody><tr><td>1</td><td>claude-3-5-sonnet-2</td><td>1.00</td><td>databricks (bedrock)</td></tr><tr><td>2</td><td>claude-3-7-sonnet</td><td>0.94</td><td>databricks (bedrock)</td></tr><tr><td>3</td><td>claude-3-5-haiku</td><td>0.91</td><td>databricks (bedrock)</td></tr><tr><td>4</td><td>o1</td><td>0.81</td><td>databricks (bedrock)</td></tr><tr><td>4</td><td>gpt-4o</td><td>0.81</td><td>databricks (bedrock)</td></tr><tr><td>6</td><td>qwen2.5-coder:32b</td><td>0.8</td><td>ollama</td></tr><tr><td>7</td><td>o3-mini</td><td>0.79</td><td>databricks (bedrock)</td></tr><tr><td>8</td><td>qwq</td><td>0.77</td><td>ollama</td></tr><tr><td>9</td><td>gpt-4o-mini</td><td>0.74</td><td>databricks (bedrock)</td></tr><tr><td>10</td><td>deepseek-chat-v3-0324</td><td>0.73</td><td>openrouter</td></tr><tr><td>11</td><td>gpt-4-5-preview</td><td>0.67</td><td>databricks</td></tr><tr><td>12</td><td>qwen2.5:32b</td><td>0.64</td><td>ollama</td></tr><tr><td>13</td><td>qwen2.5:14b</td><td>0.62</td><td>ollama</td></tr><tr><td>14</td><td>qwen2.5-coder:14b</td><td>0.51</td><td>ollama</td></tr><tr><td>15</td><td>deepseek-r1-toolshim-mistral-nemo*</td><td>0.48</td><td>openrouter</td></tr><tr><td>16</td><td>llama3.3:70b-instruct-q4_K_M</td><td>0.47</td><td>ollama</td></tr><tr><td>17</td><td>phi4-toolshim-mistral-nemo*</td><td>0.46</td><td>ollama</td></tr><tr><td>18</td><td>phi4-mistral-nemo</td><td>0.45</td><td>ollama</td></tr><tr><td>19</td><td>gemma3:27b-toolshim-mistral-nemo*</td><td>0.43</td><td>ollama</td></tr><tr><td>20</td><td>deepseek-r1-toolshim-qwen2.5-coder7b*</td><td>0.42</td><td>openrouter</td></tr><tr><td>21</td><td>llama3.3:70b-instruct-q8_0</td><td>0.41</td><td>ollama</td></tr><tr><td>22</td><td>deepseek-r1:14b-toolshim-mistral-nemo*</td><td>0.37</td><td>openrouter</td></tr><tr><td>23</td><td>deepseek-r1-distill-llama-70b-toolshim-mistral-nemo*</td><td>0.36</td><td>ollama</td></tr><tr><td>24</td><td>phi4-toolshim-qwen2.5-coder7b*</td><td>0.3</td><td>ollama</td></tr><tr><td>25</td><td>mistral-nemo</td><td>0.27</td><td>ollama</td></tr><tr><td>26</td><td>deepseek-r1-distill-llama-70b-toolshim-qwen2.5-coder7b*</td><td>0.26</td><td>openrouter</td></tr><tr><td>27</td><td>llama3.2</td><td>0.25</td><td>ollama</td></tr><tr><td>28</td><td>gemma3:27b-toolshim-qwen2.5-coder7b*</td><td>0.24</td><td>ollama</td></tr><tr><td>29</td><td>deepseek-r1:14b-toolshim-qwen2.5-coder7b*</td><td>0.22</td><td>ollama</td></tr><tr><td>29</td><td>gemma3:12b-toolshim-qwen2.5-coder7b*</td><td>0.22</td><td>ollama</td></tr><tr><td>31</td><td>mistral</td><td>0.17</td><td>ollama</td></tr><tr><td>32</td><td>gemma3:12b-toolshim-mistral-nemo*</td><td>0.15</td><td>ollama</td></tr></tbody></table>
<blockquote>
<p><em>Models with 'toolshim' in their name indicate a Goose configuration using both a primary model and a secondary local Ollama model to interpret the primary model's response into appropriate tools for Goose to invoke. Low performance may be indicative of the shim performance rather than the base model itself. We use toolshims for select models because all evaluations in this experiment require tool use capabilities, but not all models in our experiment natively support tool calling.</em></p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="open-source-model-details">Open Source Model Details<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#open-source-model-details" class="hash-link" aria-label="Direct link to Open Source Model Details" title="Direct link to Open Source Model Details">‚Äã</a></h2>
<table><thead><tr><th>Rank</th><th>Model</th><th>Model Params</th><th>Quantization</th></tr></thead><tbody><tr><td>1</td><td>qwen2.5-coder:32b</td><td>32B</td><td>Q4_K_M</td></tr><tr><td>2</td><td>qwq</td><td>32B</td><td>Q4_K_M</td></tr><tr><td>3</td><td>deepseek-chat-v3-0324</td><td>671B total, 37B active</td><td>-</td></tr><tr><td>4</td><td>qwen2.5:32b</td><td>32B</td><td>Q4_K_M</td></tr><tr><td>5</td><td>qwen2.5:14b</td><td>14B</td><td>Q4_K_M</td></tr><tr><td>6</td><td>qwen2.5-coder:14b</td><td>14B</td><td>Q4_K_M</td></tr><tr><td>7</td><td>deepseek-r1-toolshim-mistral-nemo</td><td>671B total, 37B active</td><td>fp8</td></tr><tr><td>8</td><td>llama3.3:70b-instruct-q4_K_M</td><td>70B</td><td>Q4_K_M</td></tr><tr><td>9</td><td>phi4-toolshim-mistral-nemo</td><td>14B</td><td>Q4_K_M</td></tr><tr><td>10</td><td>phi4-mistral-nemo</td><td>14B</td><td>Q4_K_M</td></tr><tr><td>11</td><td>gemma3:27b-toolshim-mistral-nemo</td><td>27B</td><td>Q4_K_M</td></tr><tr><td>12</td><td>deepseek-r1-toolshim-qwen2.5-coder7b</td><td>671B total, 37B active</td><td>fp8</td></tr><tr><td>13</td><td>llama3.3:70b-instruct-q8_0</td><td>70B</td><td>Q8_0</td></tr><tr><td>14</td><td>deepseek-r1:14b-toolshim-mistral-nemo</td><td>14B</td><td>Q4_K_M</td></tr><tr><td>15</td><td>deepseek-r1-distill-llama-70b-toolshim-mistral-nemo</td><td>70B</td><td>-</td></tr><tr><td>16</td><td>phi4-toolshim-qwen2.5-coder7b</td><td>14B</td><td>Q4_K_M</td></tr><tr><td>17</td><td>mistral-nemo</td><td>12B</td><td>Q4_0</td></tr><tr><td>18</td><td>deepseek-r1-distill-llama-70b-toolshim-qwen2.5-coder7b</td><td>70B</td><td>-</td></tr><tr><td>19</td><td>llama3.2</td><td>3B</td><td>Q4_K_M</td></tr><tr><td>20</td><td>gemma3:27b-toolshim-qwen2.5-coder7b</td><td>27B</td><td>Q4_K_M</td></tr><tr><td>21</td><td>deepseek-r1:14b-toolshim-qwen2.5-coder7b</td><td>14B</td><td>Q4_K_M</td></tr><tr><td>21</td><td>gemma3:12b-toolshim-qwen2.5-coder7b</td><td>12B</td><td>Q4_K_M</td></tr><tr><td>23</td><td>mistral</td><td>7B</td><td>Q8_0</td></tr><tr><td>24</td><td>gemma3:12b-toolshim-mistral-nemo</td><td>12B</td><td>Q4_K_M</td></tr></tbody></table>
<p><img decoding="async" loading="lazy" alt="Open Model Performance by Parameter Size" src="https://block.github.io/goose/assets/images/model_sizes_vs_score-6512491865ea8ed96119245f1f21687e.png" width="5370" height="7171" class="img_ev3q"></p>
<blockquote>
<p><em>This chart presents a view of open model performance across different parameter sizes. In the 15-32B category, we see particularly impressive results from models like qwen2.5-coder:32b (0.80) and qwq (0.77). The chart also highlights the performance gap between models with native tool calling capabilities versus those requiring toolshim implementation (shown with dotted lines), a gap which appears consistent across all size categories. This suggests that native tool calling capabilities significantly impact performance on agentic tasks. With targeted improvements in tool calling capabilities, larger open models could potentially close the performance gap with closed-source alternatives in agentic settings.</em></p>
</blockquote>
<p><img decoding="async" loading="lazy" alt="Token Usage vs Scores" src="https://block.github.io/goose/assets/images/tokens_vs_score-729f597c3ada0924c0c400b17459a3f3.png" width="3569" height="2970" class="img_ev3q"></p>
<blockquote>
<p><em>This scatterplot shows Claude models achieving top scores (0.9+) regardless of token usage, while open source models like qwen2.5-coder:32b perform well with moderate token consumption. Toolshimmed models consistently score lower, suggesting the toolshims are not very effective at closing the gap in native tool support between models. Higher token consumption up to a point appears to generally improve performance.</em></p>
</blockquote>
<p><img decoding="async" loading="lazy" alt="Tool Calls vs Scores" src="https://block.github.io/goose/assets/images/tool_calls_vs_score-bb8723cbd0a4509b1776776fb54ec07b.png" width="3568" height="2970" class="img_ev3q"></p>
<blockquote>
<p><em>Models with either too few or excessive tool calls score lower, indicating effective tool utilization - not just frequency - correlates with improved performance. Toolshimmed models for the most part invoke fewer tool calls, suggesting that the toolshims are not sufficient in their current implementation to make models effective at correctly calling the right tools.</em></p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="key-results">Key Results<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#key-results" class="hash-link" aria-label="Direct link to Key Results" title="Direct link to Key Results">‚Äã</a></h2>
<ol>
<li>
<p><strong>Closed models currently lead</strong>: Closed source models like Claude and GPT models still generally lead open source alternatives in agentic tasks.</p>
</li>
<li>
<p><strong>Promising open challengers</strong>: Models like the Qwen series and DeepSeek-v3 show significant promise among open source alternatives, but they have not yet reached the consistency and reliability of closed models across all tasks.</p>
</li>
<li>
<p><strong>Token efficiency matters</strong>: Some open models can achieve good performance while using fewer tokens, which can translate to faster task completion times and potentially lower cost. Claude-3-7-sonnet exhibits strong performance alongside claude-3-5-sonnet-2, but at much greater token usage.</p>
</li>
<li>
<p><strong>Tool calling is crucial but not as reliable in open source models today</strong>: Effective tool calling remains a significant differentiator in agentic model performance. Open source models still struggle with generating structured tool calls reliably, limiting their effectiveness on complex tasks.</p>
</li>
<li>
<p><strong>More comprehensive and complex eval tasks are needed to further stratify the top performers:</strong> Our current evaluation suite, consisting of only eight tasks (ran 3x), may be too limited to effectively differentiate top-performing models. Several models clustered around similar scores in the .77-.81 range, likely due to the simplicity of the tasks, which require minimal complex reasoning. Expanding the evaluations to include more sophisticated tasks would provide further stratification and allow the models to better showcase their more or less advanced capabilities.</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="approach-and-methodology">Approach and Methodology<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#approach-and-methodology" class="hash-link" aria-label="Direct link to Approach and Methodology" title="Direct link to Approach and Methodology">‚Äã</a></h2>
<p>We developed a compact suite of well-scoped evaluations to establish current performance baselines. While the tasks are relatively simple, they already meaningfully stratify model performance. Unlike benchmarks that focus primarily on text generation (e.g., question answering, code generation), our evaluations emphasize <strong>tool calling capabilities</strong> ‚Äî a core component of what makes Goose a powerful agent.</p>
<p>Tool calling enables models to interact with <a href="https://github.com/modelcontextprotocol/servers" target="_blank" rel="noopener noreferrer">MCP extensions</a> and make API calls, expanding Goose's functionality beyond the base models. In many cases, tasks required multiple chained tool calls to reach completion. For instance, modifying a file involves finding it in your filesystem, viewing its contents, and then updating it. Each step must be executed correctly to complete the task effectively.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="evaluation-suites">Evaluation Suites<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#evaluation-suites" class="hash-link" aria-label="Direct link to Evaluation Suites" title="Direct link to Evaluation Suites">‚Äã</a></h3>
<p>Our evaluations are defined in the <a href="https://github.com/block/goose/tree/main/crates/goose-bench/src/eval_suites" target="_blank" rel="noopener noreferrer">Goose repository</a> (PRs welcome to add additional evals!) and are grouped into two categories:</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="core-suite">Core Suite<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#core-suite" class="hash-link" aria-label="Direct link to Core Suite" title="Direct link to Core Suite">‚Äã</a></h4>
<p>These evals focus on certain tasks fundamental to developer workflows:</p>
<ul>
<li><strong>Create a file</strong>: Generate and save a new file</li>
<li><strong>List files</strong>: Access and display directory contents</li>
<li><strong>Developer Search/Replace</strong>: Search through a large file and make several replacements</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="vibes-suite">Vibes Suite<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#vibes-suite" class="hash-link" aria-label="Direct link to Vibes Suite" title="Direct link to Vibes Suite">‚Äã</a></h4>
<p>Designed as a "vibe check", these tasks quickly reveal how well models perform with Goose on a broad variety of tasks. Some, like the Flappy Bird and Goose Wiki tasks are straightforwardly visually inspectable, making it easy to eyeball outputs across models:</p>
<ul>
<li><strong>Blog summary</strong>: Fetch a blog post and summarize key points</li>
<li><strong>Flappy Bird</strong>: Implement the game in Python 2D</li>
<li><strong>Goose Wiki</strong>: Create a Wikipedia-style webpage about Goose</li>
<li><strong>Restaurant research</strong>: Search for the best Sichuanese restaurants in NYC's East Village</li>
<li><strong>Squirrel census</strong>: Perform data analysis on a CSV file</li>
</ul>
<p>This initial set of evaluations represents a carefully curated selection of manually designed tasks, chosen to highlight key strengths and weaknesses of models when integrated with Goose. However, this is just the beginning! Our goal is to continuously expand the Goosebench evaluation suite with high-quality, targeted tasks that provide deeper insights into model performance with Goose.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="evaluation-methodology">Evaluation Methodology<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#evaluation-methodology" class="hash-link" aria-label="Direct link to Evaluation Methodology" title="Direct link to Evaluation Methodology">‚Äã</a></h3>
<p>Each model was tested on the above <strong>8 tasks, with 3 runs per task</strong>, (totaling <strong>24 runs per model</strong>):</p>
<ul>
<li>Each evaluation consisted of a single turn prompt to Goose. While this benchmark focuses on single turn execution, future evaluations may assess multi-turn interactions and iterative improvement</li>
<li>Goose was required to autonomously complete the task using tool execution loops without user intervention</li>
<li>If Goose halted execution and asked the user for more guidance (e.g., "I am going to write the following contents to the file. Should I continue?"), this was considered the end of task completion. In such cases, Goose may not have successfully completed the task as measured by our evaluation framework, even if it was on the right track.</li>
<li>To account for output variability, each evaluation was run three times per model, allowing multiple chances for success.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scoring-and-evaluation-criteria">Scoring and Evaluation Criteria<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#scoring-and-evaluation-criteria" class="hash-link" aria-label="Direct link to Scoring and Evaluation Criteria" title="Direct link to Scoring and Evaluation Criteria">‚Äã</a></h3>
<p>We calculate each model's leaderboard score by averaging its performance across all evaluation tasks. For each task, we run the model three times and normalize each run's score to a 0-1 scale. The model's task score is the average of these three runs. The final leaderboard score is the average of all task scores for that model.</p>
<p>Each evaluation is scored on a mix of criteria tailored to the specific task:</p>
<ol>
<li>
<p><strong>Tool Call Execution</strong>: Did the model make the correct tool calls to complete the task?</p>
</li>
<li>
<p><strong>LLM as a Judge</strong> (where applicable): Some evaluations used GPT-4o to assess response quality on a 0-2 scale. In these cases, we generated 3 GPT-4o assessments, took the most common score among them, and ran a fourth assessment if needed to break a tie to get the final score.</p>
<ul>
<li>0 points: Incorrect or fundamentally flawed</li>
<li>1 point: Partially correct, but with issues</li>
<li>2 points: Fully correct and well executed</li>
</ul>
</li>
<li>
<p><strong>Task Specific Criteria</strong>: Different tasks required different checks, such as:</p>
<ul>
<li>Correct output formatting (e.g., markdown, output to file)</li>
<li>Expected answers (e.g., correct insights in data analysis)</li>
<li>Valid implementation (e.g., valid Python code)</li>
</ul>
</li>
</ol>
<p>Some evaluations, like code execution or file creation, have clear pass/fail criteria, similar to unit tests. Others, such as blog summarization or restaurant research, require qualitative judgment rather than strict correctness. To assess both objective and open-ended tasks, we combine task-specific criteria, tool call verification, and (where applicable) LLM as a judge scoring.</p>
<p>To assess both objective and open-ended tasks, we combine task-specific criteria, tool call verification, and (where applicable) LLM-as-a-judge scoring. This approach maintains rigor where correctness is well-defined while allowing for nuanced evaluation of subjective outputs.</p>
<p>Our goal is to provide a directional signal of model performance rather than absolute accuracy, balancing concrete and qualitative criteria.</p>
<p>Additionally, we tracked:</p>
<ol>
<li>
<p><strong>Token Efficiency</strong>: Measures total tokens used in successful runs, providing insight into model efficiency and inference speed.</p>
</li>
<li>
<p><strong>Duration</strong>: Time to execute the task. This is not reflected in the leaderboard as it is significantly affected by differences across model inference providers and hardware.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="manual-inspection-and-observations-of-results">Manual Inspection and Observations of Results<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#manual-inspection-and-observations-of-results" class="hash-link" aria-label="Direct link to Manual Inspection and Observations of Results" title="Direct link to Manual Inspection and Observations of Results">‚Äã</a></h3>
<p>We manually inspected a handful of results to assess quality. Given the scale (768 total runs across 32 models), full manual validation of every evaluation run was infeasible. Key takeaways from our inspections:</p>
<ul>
<li>
<p>LLM-as-a-judge was reliable at identifying fully incorrect answers (0 points), but distinguishing between 1 and 2 points was more subjective.</p>
</li>
<li>
<p>Some tasks (e.g., blog summarization, restaurant searches) lacked automated factual verification. The evaluation framework could confirm whether a tool was called (e.g., web search executed) and the LLM judge could assess the instruction following to some degree, but our system overall had no way of verifying if the responses were factually correct.</p>
</li>
<li>
<p>Tool execution failures were a key source of performance variation, highlighting the importance of agentic capabilities in real-world AI tasks. A model might generate the correct output in chat, but if it fails to subsequently execute the right tools‚Äîsuch as writing the output to the right file as instructed by the user‚Äîthe task is incomplete. This underscores the need for models to reliably perform multi-step actions autonomously, not just generate accurate responses.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="technical-challenges-with-open-models">Technical Challenges with Open Models<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#technical-challenges-with-open-models" class="hash-link" aria-label="Direct link to Technical Challenges with Open Models" title="Direct link to Technical Challenges with Open Models">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="context-length-limitations">Context Length Limitations<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#context-length-limitations" class="hash-link" aria-label="Direct link to Context Length Limitations" title="Direct link to Context Length Limitations">‚Äã</a></h3>
<p>A key limitation we encountered early on in our experimentation was the default context length in Ollama's OpenAI-compatible endpoint (2048 tokens), which proved insufficient for most interactive agent scenarios.</p>
<p>Our system prompt alone consumes about 1,000 tokens, leaving limited space for user queries, context, and tool responses. This restriction hampers the model's ability to manage long-running or complex tasks without losing essential context. While quantization (e.g., many Ollama models default to 4-bit) can reduce memory usage, it can also degrade performance.</p>
<p>However, we did not extensively explore the impact of different quantization levels. Fortunately, during our work, Ollama introduced an override that allowed us to increase the context length, helping to mitigate this limitation in our experiments.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tool-calling-inconsistencies-across-models">Tool Calling Inconsistencies Across Models<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#tool-calling-inconsistencies-across-models" class="hash-link" aria-label="Direct link to Tool Calling Inconsistencies Across Models" title="Direct link to Tool Calling Inconsistencies Across Models">‚Äã</a></h3>
<p>Different models have varying expectations for tool calling formats. For instance, Ollama requires JSON, while others like Functionary use XML. This lack of standardization poses integration challenges for inference providers, who must adapt the tool calling mechanisms for each model.</p>
<p>We observed performance fluctuations based on the model host and input/output formatting, highlighting the need for standardized tool calling formats in model training.
For models without native tool calling capabilities, we developed a "toolshim"‚Äîan interpretive layer that translates a model's output into the appropriate tool calls.</p>
<p>This approach enables models like DeepSeek and Gemma to perform basic tool actions, though performance remains limited. None of the models configured with the toolshim greater than a 41% success rate in our experiments. Future improvements may focus on fine-tuning these shims for better handling of agentic tasks, helping to reduce inconsistencies across models in tool call generation.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="toolshims-to-bridge-the-gap">‚ÄúToolshims‚Äù to bridge the gap?<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#toolshims-to-bridge-the-gap" class="hash-link" aria-label="Direct link to ‚ÄúToolshims‚Äù to bridge the gap?" title="Direct link to ‚ÄúToolshims‚Äù to bridge the gap?">‚Äã</a></h3>
<p>We developed a "toolshim" as an experimental feature to enable models lacking native tool calling support (e.g., DeepSeek, Gemma3, Phi4) to interact with external tools. The toolshim pairs these models with a smaller, local model (e.g., mistral-nemo, qwen2.5-coder 7b), which is tasked with translating the primary model‚Äôs natural language responses into the appropriate tool calls for Goose to invoke. The local model is guided by Ollama‚Äôs structured outputs feature to enforce proper formatting for tool call generations.</p>
<p>However, this solution has limited performance due to:</p>
<ul>
<li>
<p><strong>Instruction-following limitations:</strong> The smaller models used typically have less robust instruction-following ability especially for longer inputs, making them prone to inaccuracies when parsing the primary model's output into the correct tool calls. We also found the shim models to be quite sensitive to prompting.</p>
</li>
<li>
<p><strong>Structured output interference:</strong> Ollama‚Äôs structured output feature influences the model‚Äôs token sampling process, where the output is impacted by the model‚Äôs fundamental ability to extract information and generate JSON appropriately.</p>
</li>
</ul>
<p>Despite these challenges, there could be potential in fine-tuning these toolshim models to specifically optimize them for tool call generation.
If you‚Äôd like to try out the toolshim, check out our <a href="https://block.github.io/goose/docs/guides/experimental-features" target="_blank" rel="noopener noreferrer">documentation</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="practical-advice-for-local-model-users">Practical Advice for Local Model Users<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#practical-advice-for-local-model-users" class="hash-link" aria-label="Direct link to Practical Advice for Local Model Users" title="Direct link to Practical Advice for Local Model Users">‚Äã</a></h2>
<p>For those running a local, open-source AI experience with Goose, here are some key recommendations based on our testing:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="optimize-context-length">Optimize Context Length<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#optimize-context-length" class="hash-link" aria-label="Direct link to Optimize Context Length" title="Direct link to Optimize Context Length">‚Äã</a></h3>
<p>Ensure your model has enough context length to avoid running out of space in the context window. For Ollama, you can adjust the context length via an environment variable:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">OLLAMA_CONTEXT_LENGTH=28672 ollama serve</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can also set the context length as a parameter in Ollama by updating the Modlfile with your desired context length and running <code>ollama create</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="be-aware-of-quantization-levels">Be Aware of Quantization Levels<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#be-aware-of-quantization-levels" class="hash-link" aria-label="Direct link to Be Aware of Quantization Levels" title="Direct link to Be Aware of Quantization Levels">‚Äã</a></h3>
<p>Different quantization levels (4-bit, 8-bit, and 16-bit) have distinct impacts on performance:</p>
<ul>
<li><strong>4-bit:</strong> Offers maximum compression with minimal memory requirements but may degrade quality.</li>
<li><strong>8-bit:</strong> A balanced option for most consumer hardware, providing good performance and reasonable quality.</li>
<li><strong>16-bit:</strong> Higher quality but requires significantly more memory, which may limit performance on lower-end hardware.</li>
</ul>
<p>Ollama defaults to 4-bit quantization in most cases, but for tasks requiring more complex reasoning or tool usage, testing with higher quantization levels (e.g., 8-bit) may improve performance.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompting-matters-for-smaller-models">Prompting Matters for Smaller Models<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#prompting-matters-for-smaller-models" class="hash-link" aria-label="Direct link to Prompting Matters for Smaller Models" title="Direct link to Prompting Matters for Smaller Models">‚Äã</a></h3>
<p>Smaller models are more sensitive to prompt variations and often require more explicit instructions due to their limited capacity to infer. To achieve optimal performance, tasks may need to be broken down further, reducing ambiguity and limiting the range of possible responses.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="hardware-considerations">Hardware Considerations<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#hardware-considerations" class="hash-link" aria-label="Direct link to Hardware Considerations" title="Direct link to Hardware Considerations">‚Äã</a></h3>
<p>We ran these models with a variety of inference providers (local and hosted) and hardware configurations including Apple M1, NVIDIA RTX 4080, NVIDIA RTX 4090, and NVIDIA H100. Due to the mix of hardware, we did not include measurements of task duration in the benchmark given the expected variability in inference performance driven by the underlying hardware.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="gpu-backends">GPU Backends<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#gpu-backends" class="hash-link" aria-label="Direct link to GPU Backends" title="Direct link to GPU Backends">‚Äã</a></h4>
<p>Depending on your hardware, different GPU acceleration backends offer varying levels of performance:</p>
<ul>
<li>
<p><strong>CUDA (NVIDIA GPUs)</strong>: Currently offers the best performance and compatibility for running LLMs locally. Most open models and inference frameworks are optimized for CUDA first.</p>
</li>
<li>
<p><strong>Metal (Apple Silicon)</strong>: Provides good acceleration on Mac devices with M-series chips. While not as fast as high-end NVIDIA GPUs, recent optimization work has made Metal increasingly viable for running 7B-13B models.</p>
</li>
<li>
<p><strong>ROCm (AMD GPUs)</strong>: Support is improving but still lags behind CUDA. If you have a compatible AMD GPU, you may expect to see some performance limitations and compatibility issues with certain models and quantization methods.</p>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="cpugpu-memory-management">CPU/GPU Memory Management<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#cpugpu-memory-management" class="hash-link" aria-label="Direct link to CPU/GPU Memory Management" title="Direct link to CPU/GPU Memory Management">‚Äã</a></h4>
<p>Ollama helps distribute model layers across CPU and GPU memory, allowing you to run larger models than would fit entirely in your GPU VRAM. However, be aware of:</p>
<ul>
<li><strong>Data movement overhead</strong>: When a model doesn't fit entirely in GPU memory, constant data movement between CPU and GPU can significantly impact performance</li>
<li><strong>GPU utilization</strong>: Models that fit entirely in GPU memory will perform dramatically better than those that require CPU offloading</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="considering-cloud-hosted-open-models">Considering Cloud-Hosted Open Models?<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#considering-cloud-hosted-open-models" class="hash-link" aria-label="Direct link to Considering Cloud-Hosted Open Models?" title="Direct link to Considering Cloud-Hosted Open Models?">‚Äã</a></h3>
<p>If using a cloud service like OpenRouter to try larger open-weight models (e.g., LLaMA 3 70B or Qwen), be aware that performance may vary depending on which hosted inference provider you're using.</p>
<p>Different providers might:</p>
<ul>
<li>Quantize models on the backend without clear disclosure</li>
<li>Implement different integration patterns that affect model performance, especially with tool calling</li>
<li>Have different hardware configurations affecting speed and reliability</li>
</ul>
<p>We recommend experimenting with different hosted inference providers to see which works best for your specific use cases. OpenRouter for example lets you <a href="https://openrouter.ai/docs/features/provider-routing" target="_blank" rel="noopener noreferrer">specify the provider</a> you want to route your requests to.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="run-your-own-benchmarks">Run Your Own Benchmarks<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#run-your-own-benchmarks" class="hash-link" aria-label="Direct link to Run Your Own Benchmarks" title="Direct link to Run Your Own Benchmarks">‚Äã</a></h2>
<p>We encourage the community to conduct their own benchmarks with various hardware setups and configurations to help deepen our understanding of how Goose performs across different setups. We also welcome contributions of additional evals to GooseBench to broaden our coverage.</p>
<p>We are currently cleaning up our code and  working on some quality of life improvements to make the process of running evals and reproducing these results more streamlined, and will share those when ready (next few weeks)!</p>
<p>Special thanks to our contributors, Zaki and Marcelle, for their work on GooseBench, which enabled this experimentation.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="future-work">Future Work<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#future-work" class="hash-link" aria-label="Direct link to Future Work" title="Direct link to Future Work">‚Äã</a></h2>
<p>As AI capabilities continue to evolve, we aim to systematically expand our evaluation framework to capture a broader range of use cases. We hope to benchmark models on a wider swath of consumer-grade hardware to better understand system requirements, execution times, and the impact of different quantization levels on performance.</p>
<p>We also plan to introduce vision-oriented evaluations, particularly for multimodal models with Goose. These will assess image processing, multimodal reasoning, and visual tool interactions, helping us measure how well models integrate and perform across different modalities.</p>
<p>In addition, we seek to develop evaluations tailored to non-developer workflows and tasks. This will provide insights into how Goose and AI models can serve a wider range of users beyond technical audiences.</p>
<p>Finally, we see value in testing long-context retention and multi-turn interactions to evaluate model performance in complex, sustained conversations.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="result-eval-examples">Result Eval Examples<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#result-eval-examples" class="hash-link" aria-label="Direct link to Result Eval Examples" title="Direct link to Result Eval Examples">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="flappy-bird">Flappy Bird<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#flappy-bird" class="hash-link" aria-label="Direct link to Flappy Bird" title="Direct link to Flappy Bird">‚Äã</a></h3>
<p>For runs that successfully created a working flappy bird game with pygame, here are the gifs of playing the games:</p>
<div class="carousel-container"><h3 class="carousel-header">claude-3-5-haiku</h3><div class="swiper swiper-container-flappy" style="width:40%"><div class="swiper-wrapper"><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/claude-3-5-haiku-ff0b0347d5aec59efab98769039f7063.gif" alt="Slide 1" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/claude-3-5-sonnet-2-b445a205684b5c7bd674d744b92cc4ea.gif" alt="Slide 2" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/claude-3-7-sonnet-a11804cddf505cec1df78ca8315c8257.gif" alt="Slide 3" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/deepseek-chat-v3-0324-01d4dec7f79311b593ac04fbba9f93ef.gif" alt="Slide 4" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/deepseek-r1-toolshim-mistral-nemo-bf4bd9d06ff57563ae2762d047ccb1c7.gif" alt="Slide 5" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/gpt-4-5-preview-1cd4983ce3ceafaf22b12dff95ed4ad1.gif" alt="Slide 6" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/gpt-4o-mini-9e4478259ad6e3e4353394c0b3f19126.gif" alt="Slide 7" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/gpt-4o-cbdbf0c788605e797fb8f4ea9b987b8c.gif" alt="Slide 8" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/o1-134e3913d813a9e797e979c42a92fa3f.gif" alt="Slide 9" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/o3-mini-7a869a80bf99f27dd7454830ae309184.gif" alt="Slide 10" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/qwen2.5-coder-32b-ceca4ac06aaf0f42f3d6b65363c60e3e.gif" alt="Slide 11" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/qwq-3a05f474ec77049ba53a0439b36df0ba.gif" alt="Slide 12" class="carousel-image"></div></div><div class="swiper-button-prev"></div><div class="swiper-button-next"></div><div class="swiper-pagination"></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="wiki-pages">Wiki Pages<a href="https://block.github.io/goose/blog/2025/03/31/goose-benchmark#wiki-pages" class="hash-link" aria-label="Direct link to Wiki Pages" title="Direct link to Wiki Pages">‚Äã</a></h3>
<p>For runs that successfully created an index.html for the Wiki page task, here‚Äôs what the rendered outputs look like: Wiki pages Missing results are for models that did not successfully write to an index.html file. For example, they may have outputted the code to write in chat and asked the user to implement that code in an index.html file rather than written to the file themselves.</p>
<div class="carousel-container"><h3 class="carousel-header">gemma3.27b-toolshim-mistral-nemo</h3><div class="swiper swiper-container-wiki" style="width:80%"><div class="swiper-wrapper"><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/gemma3.27b-toolshim-mistral-nemo-ee63d6bc421659fa3501a447f8c46426.png" alt="Slide 1" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/claude-3.5-haiku-71f1ce5faa13846a556ba539c57caae8.png" alt="Slide 2" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/claude-3.5-sonnet-2-2c683339b1e4880de5ce5aa435304a5a.png" alt="Slide 3" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/claude-3.7-sonnet-6042d99d5829957f3fd471d44ff2ea26.png" alt="Slide 4" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/deepseek-chat-v3-0324-879b3ea78b30ff135607365fd77eeebe.png" alt="Slide 5" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/deepseek-r1-distill-llama-70b-toolshim-mistral-nemo-bfd7f9d3f37a92aaae6c7afb74b52d91.png" alt="Slide 6" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/gpt-4.5-preview-99cafaf409ffbc47a8186ed0a5c05043.png" alt="Slide 7" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/gpt-4o-mini-37fbaf84ea5c2d7d57a9b4e7ddf4fb3b.png" alt="Slide 8" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/gpt-4o-8b238b9d92ca62e7480ab6f12faeedfa.png" alt="Slide 9" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/llama3.3.70b-instruct-q4_K_M-91e7e0436dd5b7530fc18ff39366369d.png" alt="Slide 10" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/llama3.3.70b-instruct-q8_0-9477c2fcd3abc509fa4855d9633be812.png" alt="Slide 11" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/mistral-nemo_index-4866f9a20a1294585adef2dc4fbc4ade.png" alt="Slide 12" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/o1-9a41312ec15fa512b13f215c94dc1335.png" alt="Slide 13" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/o3-mini-0da4fd28bcb174906ff6b2664c08e88d.png" alt="Slide 14" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/phi4-toolshim-mistral-nemo-db0e5f6075b793b2b6facfa483fc9a5d.png" alt="Slide 15" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/phi4-toolshim-qwen2.5-coder7b-632ebfc62d7e69db76bc030235990574.png" alt="Slide 16" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/qwen2.5-coder.14b-dfb90e9a247737df599d7736e982fa64.png" alt="Slide 17" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/qwen2.5-coder.32b-e540b5187a35326045a1810070188b68.png" alt="Slide 18" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/qwen2.5.14b-5f613200d90cb8f8e5242cefab130ed2.png" alt="Slide 19" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/qwen2.5.32b-cf589a3b4494e4f75a63f3b7c8f13923.png" alt="Slide 20" class="carousel-image"></div><div class="swiper-slide"><img src="https://block.github.io/goose/assets/images/qwq-2df978b1c23d170ed2bf2d2caf5c3ecd.png" alt="Slide 21" class="carousel-image"></div></div><div class="swiper-button-prev"></div><div class="swiper-button-next"></div><div class="swiper-pagination"></div></div></div>
]]></content>
        <author>
            <name>Alice Hau</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Securing the Model Context Protocol]]></title>
        <id>https://block.github.io/goose/blog/2025/03/31/securing-mcp</id>
        <link href="https://block.github.io/goose/blog/2025/03/31/securing-mcp"/>
        <updated>2025-03-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Building secure and capable AI integrations with Model Context Protocol (MCP) at Block.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/securing-mcp-5e475e91c0e621afa33e30b3d89ef065.png" width="1200" height="630" class="img_ev3q"></p>
<blockquote>
<p><em><strong>Authors:</strong> Alex Rosenzweig, Arihant Virulkar, Andrea Leoszko, Wes Ring, Mike Shema, F G, Alex Klyubin, Michael Rand, Zhen Lian, Angie Jones, Douwe Osinga, Mic Neale, Bradley Axen, Gelareh Taban</em></p>
</blockquote>
<p>At Block, we‚Äôve been working hard to augment the capabilities of AI tooling by building "MCP Servers" which are designed to help make our Artificial Intelligence (AI) Agent codename goose more capable of interacting with the systems and tools we care about.</p>
<p>Block‚Äôs Information Security (InfoSec) team has been heavily involved in this work and we wanted to capture our learnings in the space to help others. We expect there to be growing adoption and use cases for this including applying the technology in the security domain.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-the-model-context-protocol-mcp">What is the Model Context Protocol (MCP)<a href="https://block.github.io/goose/blog/2025/03/31/securing-mcp#what-is-the-model-context-protocol-mcp" class="hash-link" aria-label="Direct link to What is the Model Context Protocol (MCP)" title="Direct link to What is the Model Context Protocol (MCP)">‚Äã</a></h2>
<p>Model Context Protocol (MCP) is a protocol <a href="https://docs.anthropic.com/en/docs/agents-and-tools/mcp" target="_blank" rel="noopener noreferrer">developed by Anthropic</a>, with input from Block engineers, that makes it easier to build integrations for agents to connect and use other tooling. Put simply, if you want AI to connect to SaaS solutions (e.g. Github, Jira),  CLI tools (e.g. AWS CLI) or your own custom applications you can write an MCP server and "teach" it how to correctly interact.</p>
<p>This has huge advantages as we can create deterministic, well defined interfaces that reduce the amount of "experimentation/brute force" required for agents to perform helpful tasks.</p>
<p>A use case like "read this ticket from Jira and then clone the relevant github repo and implement the feature" is more likely to succeed if the agent doesn‚Äôt have to work out how to interact with Jira, Github and the Git CLI.</p>
<p>This helps agents to spend time solving novel problems rather than burning tokens understanding well defined API specifications.</p>
<p>The following is example code from an MCP tool that integrates with an Snowflake API.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token decorator annotation punctuation" style="color:#393A34">@mcp</span><span class="token decorator annotation punctuation" style="color:#393A34">.</span><span class="token decorator annotation punctuation" style="color:#393A34">tool</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">submit_feedback</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    feedback</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> Dict</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Union</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> List</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:#e3116c">"""Submit feedback to the Snowflake team.</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    Args:</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">        feedback: Feedback message</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    Returns:</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">        Dictionary containing feedback status</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> snowflake_client</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">submit_feedback</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        feedback_text</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">feedback</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="mcp-misconceptions">MCP Misconceptions<a href="https://block.github.io/goose/blog/2025/03/31/securing-mcp#mcp-misconceptions" class="hash-link" aria-label="Direct link to MCP Misconceptions" title="Direct link to MCP Misconceptions">‚Äã</a></h2>
<p>There are some minor misconceptions around MCP, which is understandably exacerbated by some of the verbiage not accurately aligning with more analogous technologies. The biggest point of confusion is the terminology of "MCP Servers".</p>
<p>Upon initially reviewing MCP, I noticed multiple references to "MCP Servers," which led me to believe that integrating with them would require modifications to the application backend.</p>
<p>However, these "servers" act as a client layer (either locally or remotely) to help the agent proxy function calls to an existing service, tool, API or RPC in a deterministic manner.</p>
<p>When securing an MCP integration we need to think about two sets of communications:</p>
<ul>
<li>How does the agent talk to the MCP Server?</li>
<li>How does the MCP Server act as a client for the system it connects to?</li>
</ul>
<p>We can model this by:</p>
<ul>
<li>Treating the Agent as a non-deterministic client that can arbitrarily call tools provided by the MCP server. This is due to the fact that we don‚Äôt know what prompts it will be provided.</li>
<li>Treating the MCP Server as a Client Library for the utility/utilities it integrates into. The client type can vary (gRPC, REST, SOAP, CLI, etc.) but in practice, MCPs simply provide a codified way to execute an action.</li>
</ul>
<p>For the former, we can lean into existing practices, understand the scope of access and what risks they present if used inappropriately.</p>
<p>For the latter, we can directly model it as a client for an external provider. This is a well understood pattern as client library generation is in no way new.</p>
<p><img decoding="async" loading="lazy" alt="MCP Workflow" src="https://block.github.io/goose/assets/images/mcp-workflow-9ef765371217ef59184cfddbbede89a4.png" width="1600" height="705" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-we-approach-making-it-secure">How do we approach making it secure?<a href="https://block.github.io/goose/blog/2025/03/31/securing-mcp#how-do-we-approach-making-it-secure" class="hash-link" aria-label="Direct link to How do we approach making it secure?" title="Direct link to How do we approach making it secure?">‚Äã</a></h2>
<p>Using this mental model we can break MCP security into a few components:</p>
<ul>
<li>Secure the Agents communication to the MCP</li>
<li>Secure the MCPs connectivity to the tool/server</li>
<li>Secure the identity of the user and the agent when talking to servers</li>
<li>Secure the underlying host and supply chain</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="securing-agentic-communications-to-mcp-servers">Securing Agentic Communications to MCP Servers<a href="https://block.github.io/goose/blog/2025/03/31/securing-mcp#securing-agentic-communications-to-mcp-servers" class="hash-link" aria-label="Direct link to Securing Agentic Communications to MCP Servers" title="Direct link to Securing Agentic Communications to MCP Servers">‚Äã</a></h3>
<p>In the current operating model both the Agent and the MCP Server run on the "client side".</p>
<p>However, the majority of agentic tools are integrated with LLMs provided by third parties. This has implications for data privacy and security.</p>
<p>For example if you expose an MCP interface that returns confidential data like Social Security Numbers (<a href="https://code.cash.app/dsl-framework" target="_blank" rel="noopener noreferrer">what we at Block call DSL4 data</a>) then you run the risk of that data being exposed to the underlying LLM provider.</p>
<p>A mitigation here is allowing MCP implementation to specify an allowlist of LLM providers that it can be integrated with as a configuration option. Having utilities to "tell" agents that can integrate with multiple models which models are allowed to invoke a given tool is a powerful primitive.</p>
<p>Back to our SSN example, if we could specify that this tool can only be invoked by local LLM models and trust the Agent Client to enforce this we could prevent sensitive data from being transmitted to third party LLMs. As a further enhancement, being able to instruct agents not to share tool output with other MCPs would provide further control of dataflow.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="securing-mcp-communications-to-toolingservers">Securing MCP Communications to Tooling/Servers<a href="https://block.github.io/goose/blog/2025/03/31/securing-mcp#securing-mcp-communications-to-toolingservers" class="hash-link" aria-label="Direct link to Securing MCP Communications to Tooling/Servers" title="Direct link to Securing MCP Communications to Tooling/Servers">‚Äã</a></h3>
<p>This paradigm actually isn‚Äôt new and we can lean into existing best practices for externally facing APIs.</p>
<p>Specifically, if we build our server side APIs with secure-by-design patterns already available through vetted frameworks already in-mind then we are already in a strong position as the MCP Server only acts as a client for these externally facing APIs and utilities.</p>
<p>The reason this paradigm isn‚Äôt new is due to the fact that anyone can already interact with external APIs and tooling and likely will call the endpoints in unexpected ways.</p>
<p>This comes from the fact that LLMs interpret information in a manner that is different to human users, the protocol isn‚Äôt implicitly allowing for agents to perform actions that users couldn‚Äôt but LLMs may decide to perform actions that users wouldn‚Äôt choose.</p>
<p>Where this <strong>paradigm does shift</strong> is when integrating with tooling not previously designed to be communicated with by all manner of clients. For example if an API was previously designed to only be communicated with by a specific client or implementation (such as a mobile APIs or internal tooling) then adopting MCP may lead to unexpected failure modes or security concerns.</p>
<p>This area is likely where Security Practitioners will need to concentrate further time and effort to limit integration scope to avoid damages in the event of a security attack against the underlying LLM or planning logic.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="agent-human-and-device-identity">Agent, Human and Device Identity<a href="https://block.github.io/goose/blog/2025/03/31/securing-mcp#agent-human-and-device-identity" class="hash-link" aria-label="Direct link to Agent, Human and Device Identity" title="Direct link to Agent, Human and Device Identity">‚Äã</a></h3>
<p>In our traditional model of Authentication (AuthN) and Authorization (AuthZ) it‚Äôs common to tie an identity to a single point of abstraction such as a person or a business.</p>
<p>This field has organically been evolving towards pairing a services identity user identity abstraction with identification of client devices such as browsers and mobile phones. This is done to help reduce the prevalence of attacks caused by automation and inauthentic traffic such as account takeover attacks (ATO).</p>
<p>With the evolution of Agents performing actions on behalf of users we will need to evolve to be able to determine the combination of:</p>
<ol>
<li>The primary identity abstraction</li>
<li>The agent‚Äôs identity</li>
<li>The device/location the agent is running from</li>
</ol>
<p>Having consistent mechanisms for identifying usage in this manner allows companies to protect users from integrations with malicious agents and protect their platforms from attacks by unwanted agentic tooling.</p>
<p>The model context protocol itself has a <a href="https://spec.modelcontextprotocol.io/specification/2025-03-26/basic/authorization/" target="_blank" rel="noopener noreferrer">specification for OAuth</a> that at the time of writing was a draft, but has since been released here.</p>
<p>This flow considers the following steps:</p>
<ol>
<li>Client/Agent initiates standard OAuth flow with MCP server</li>
<li>MCP server redirects user to third-party authorization server</li>
<li>User authorizes with third-party server</li>
<li>Third-party server redirects back to MCP server with authorization code</li>
<li>MCP server exchanges code for third-party access token</li>
<li>MCP server generates its own access token bound to the third-party session</li>
<li>MCP server completes original OAuth flow with Client/Agent</li>
</ol>
<p>This is aligned with existing best practices but requires the MCPs themselves to have browser integrations/orchestration for OAuth to ensure they are able to redirect users effectively.</p>
<p>A future enhancement we‚Äôd love to see is requiring the agents to implement browser orchestration to provide an OAuth interface that MCPs themselves can integrate against and leverage. We believe this change would likely help standardise implementations and allow for protocol expansion to identify the agents and client alongside the user.</p>
<p>Having individual MCP implementations implement OAuth themselves is likely to lead to long term security and maintenance issues due to misimplementation or delays adopting future protocol enhancements.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="human-in-the-loop-for-operational-safety">Human in the loop for operational safety<a href="https://block.github.io/goose/blog/2025/03/31/securing-mcp#human-in-the-loop-for-operational-safety" class="hash-link" aria-label="Direct link to Human in the loop for operational safety" title="Direct link to Human in the loop for operational safety">‚Äã</a></h3>
<p>At a certain point we may build enough trust in our agents to allow them to perform more dangerous operations. For these kinds of use cases we can likely lean on known good practices for change management.</p>
<p>Specifically, building server side solutions to alert the user to the expected changes and the agent performing them and seeking consent will likely be a critical primitive for APIs of the future. The goal of this would be to ultimately keep irreversible or hard to reverse actions gated behind human interaction or approval.</p>
<p>For example, for an agent tasked with writing IaC, this could be as simple as requesting a human approver before applying/deploying the IaC.</p>
<p>In client side agents this would improve data integrity in the event the underlying LLM hallucinated or was tampered with externally through malicious MCP or data sources.</p>
<p>In the latest release of the protocol, an enhancement we love is being able to <a href="https://github.com/modelcontextprotocol/specification/blob/9236eb1cbfa02c17ab45c83a7bdbe55c450070be/schema/2025-03-26/schema.ts#L730" target="_blank" rel="noopener noreferrer">annotate a tool</a> to indicate to clients that tool actions are "readOnly" or "destructive". Using this to decide when to require a secondary approval from the user before performing a given action provides significantly better protections for users.</p>
<p>While we encourage an LLM based processing step to check for potentially malicious commands, <strong>having a deterministic aspect to higher risk commands in tandem ensures good access control is a more accurate way to provide protections</strong>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="securing-the-mcp-supply-chain">Securing the MCP Supply Chain<a href="https://block.github.io/goose/blog/2025/03/31/securing-mcp#securing-the-mcp-supply-chain" class="hash-link" aria-label="Direct link to Securing the MCP Supply Chain" title="Direct link to Securing the MCP Supply Chain">‚Äã</a></h3>
<p>At this stage the majority of MCPs are being installed and run client side via commands like docker, uvx, pipx and npx. In practice this means when users install MCP based extensions they are providing arbitrary code execution privileges to the MCP Server.</p>
<p>In practice this presents a well documented and understood supply chain problem. How can we reduce risk associated with using third party code. The good news is that the same techniques still work including:</p>
<ol>
<li>Only install MCPs from trusted sources and are well maintained</li>
<li>Implement integrity checks and/or signing of artifacts where possible to ensure you‚Äôre executing the expected code</li>
<li>Implement allow lists on enterprise agents to ensure users only use pre-validated MCPs</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://block.github.io/goose/blog/2025/03/31/securing-mcp#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">‚Äã</a></h2>
<p>Much like agents are paving the way to allow LLMs to have more real-world utility MCP and similar protocols will continue to grow in adoption.</p>
<p>We believe that by contributing to open source projects early, sharing our learnings publicly, and building our own solutions that leverage MCP, Block can maintain security best practices from the deterministic world while continuing to evolve them with newer technologies.</p>
<p>We‚Äôre excited to work on making this protocol more secure for users and developers alike and are looking forward to sharing how we‚Äôve used MCP for our own Security use-cases in the future.</p>
]]></content>
        <author>
            <name>Alex Rosenzweig</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vibe Coding with Goose and the Speech MCP]]></title>
        <id>https://block.github.io/goose/blog/2025/03/28/vibe-coding-with-goose</id>
        <link href="https://block.github.io/goose/blog/2025/03/28/vibe-coding-with-goose"/>
        <updated>2025-03-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Explore the new Speech MCP server that enables voice-controlled coding and natural conversation with your AI agent]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/vibe-coding-b2efeed37ea43f4773da5f1ff96f4184.png" width="1280" height="720" class="img_ev3q"></p>
<p>Imagine creating an app just by describing what you want out loud, like you‚Äôre talking to a friend. That‚Äôs the magic of vibe coding: turning natural language into working code with the help of an AI agent. And while typing a prompt gets the job done, saying it out loud hits different üî• The new <a href="https://block.github.io/goose/docs/tutorials/speech-mcp" target="_blank" rel="noopener noreferrer">Speech MCP server</a> has quite literally entered the chat.</p>
<p>In a recent <a href="https://www.youtube.com/watch?v=Zey9GHyXlHY&amp;ab_channel=BlockOpenSource" target="_blank" rel="noopener noreferrer">Wild Goose Case livestream</a>, hosts <a href="https://www.linkedin.com/in/ebonylouis/" target="_blank" rel="noopener noreferrer">Ebony Louis</a> and <a href="https://www.linkedin.com/in/acekyd/" target="_blank" rel="noopener noreferrer">Adewale Abati</a> were joined by <a href="https://www.linkedin.com/in/maksym-stepanenko-26404867" target="_blank" rel="noopener noreferrer">Max Novich</a> from Block's AI tools team, who demonstrated an exciting new extension - the <a href="https://github.com/Kvadratni/speech-mcp" target="_blank" rel="noopener noreferrer">Speech MCP server</a>.</p>
<p>During the livestream, Max demonstrated this by creating an entire web application using only voice commands - no keyboard or mouse required. This resulted in a vibrant, animated webpage with 3D effects, synthwave aesthetics, and interactive elements, all created through natural conversation with Goose.</p>
<iframe class="aspect-ratio" src="https://www.youtube.com/embed/Zey9GHyXlHY?start=437&amp;end=752" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-speech-mcp-server">The Speech MCP Server<a href="https://block.github.io/goose/blog/2025/03/28/vibe-coding-with-goose#the-speech-mcp-server" class="hash-link" aria-label="Direct link to The Speech MCP Server" title="Direct link to The Speech MCP Server">‚Äã</a></h2>
<p><a href="https://github.com/Kvadratni/speech-mcp" target="_blank" rel="noopener noreferrer">Speech MCP</a> is an open source MCP server that enables voice interaction with AI agents like Goose. What makes it special is that it runs entirely locally on your machine, making it:</p>
<ul>
<li>LLM agnostic</li>
<li>Privacy-focused</li>
<li>Cost-effective compared to cloud-based alternatives</li>
<li>Accessible without internet connectivity</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="key-features">Key Features<a href="https://block.github.io/goose/blog/2025/03/28/vibe-coding-with-goose#key-features" class="hash-link" aria-label="Direct link to Key Features" title="Direct link to Key Features">‚Äã</a></h3>
<ol>
<li>
<p><strong>Local Speech Processing</strong>: Uses two main models:</p>
<ul>
<li>Faster Whisper: An efficient method to convert speech to text</li>
<li>Coqui TTS: A Japanese-engineered text-to-speech model with 54 natural-sounding voices</li>
</ul>
</li>
<li>
<p><strong>Voice Selection</strong>: Choose from 54 different voices with varying characteristics and personalities</p>
</li>
<li>
<p><strong>Multi-Speaker Narration</strong>: Generate and play conversations between multiple voices</p>
</li>
<li>
<p><strong>Audio Transcription</strong>: Convert audio/video content to text with timestamps and speaker detection</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="live-demo-highlights">Live Demo Highlights<a href="https://block.github.io/goose/blog/2025/03/28/vibe-coding-with-goose#live-demo-highlights" class="hash-link" aria-label="Direct link to Live Demo Highlights" title="Direct link to Live Demo Highlights">‚Äã</a></h2>
<p>During the demonstration, Max showcased several impressive capabilities:</p>
<ol>
<li>
<p><strong>Voice-Controlled Development</strong>:</p>
<ul>
<li>Created animated text effects</li>
<li>Implemented 3D transformations</li>
<li>Added synthwave aesthetics with gradients and grids</li>
<li>Integrated music controls</li>
</ul>
</li>
<li>
<p><strong>System Integration</strong>:</p>
<ul>
<li>Controlled applications like Discord using voice commands</li>
<li>Navigated file system and development environment</li>
<li>Generated and managed audio content</li>
</ul>
</li>
<li>
<p><strong>Natural Interaction</strong>:</p>
<ul>
<li>Fluid conversation with Goose</li>
<li>Real-time feedback and adjustments</li>
<li>Multi-voice narration for documentation</li>
</ul>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started">Getting Started<a href="https://block.github.io/goose/blog/2025/03/28/vibe-coding-with-goose#getting-started" class="hash-link" aria-label="Direct link to Getting Started" title="Direct link to Getting Started">‚Äã</a></h2>
<p>To try the Speech MCP server yourself:</p>
<ol>
<li>
<p>Install the required audio library (PortAudio):</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># For macOS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">brew install portaudio</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># For Linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">apt-get install portaudio  # or dnf install portaudio</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Install the extension directly using the one-click <a href="goose://extension?cmd=uvx&amp;&amp;arg=-p&amp;arg=3.10.14&amp;arg=speech-mcp@latest&amp;id=speech_mcp&amp;name=Speech%20Interface&amp;description=Voice%20interaction%20with%20audio%20visualization%20for%20Goose" target="_blank" rel="noopener noreferrer">deep link install</a> in Goose</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="join-the-development">Join the Development<a href="https://block.github.io/goose/blog/2025/03/28/vibe-coding-with-goose#join-the-development" class="hash-link" aria-label="Direct link to Join the Development" title="Direct link to Join the Development">‚Äã</a></h2>
<p>The Speech MCP server is <a href="https://github.com/Kvadratni/speech-mcp" target="_blank" rel="noopener noreferrer">open-source</a> and welcomes contributions. You can also connect with Max on <a href="https://discord.gg/block-opensource" target="_blank" rel="noopener noreferrer">Discord</a> for questions and collaboration.</p>
<p>Voice interactions with AI agents like Goose with the power and tools to act on instructions provides a different kind of vibe that makes the future feel closer than ever. Whether you're interested in vibe coding, accessibility improvements, or just want to feel a bit more like Tony Stark while getting Goose to pull a J.A.R.V.I.S, the Speech MCP server offers a glimpse into the future of human-AI collaboration - and it's available today.</p>
]]></content>
        <author>
            <name>Adewale Abati</name>
            <uri>https://adewaleabati.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Determine If An MCP Server Is Safe]]></title>
        <id>https://block.github.io/goose/blog/2025/03/26/mcp-security</id>
        <link href="https://block.github.io/goose/blog/2025/03/26/mcp-security"/>
        <updated>2025-03-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Before you plug your agent into just any MCP server, here's how to check if it's actually safe.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/mcpsafety-87eb7ace7163a5edbe068ff75b79a199.png" width="2240" height="1260" class="img_ev3q"></p>
<p><a href="https://www.anthropic.com/news/model-context-protocol" target="_blank" rel="noopener noreferrer">Model Context Protocol (MCP)</a> servers are everywhere right now. Last time I checked there were <strong>3,000 and counting</strong>. Every day, a new one pops up, letting AI agents like Goose access files, query your Google Drive, search the web, and unlock all kinds of amazing integrations.</p>
<p>And just when I thought things couldn‚Äôt get any crazier, Zapier blessed us with an MCP server. That means your agent can now tap into over 8,000+ integrations.</p>
<p>So trust me, I know it‚Äôs super tempting to want to plug your AI agent into everything and just <em>see</em> what happens.</p>
<p>But hold on a minute, we can‚Äôt afford to skip over security.</p>
<p>When you connect to an MCP server, you‚Äôre giving it access to your workflows, most times even your data. And a lot of these servers are community built, with little to no governance.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="heres-what-i-do-before-i-trust-an-mcp-server">Here‚Äôs What I Do Before I Trust an MCP Server<a href="https://block.github.io/goose/blog/2025/03/26/mcp-security#heres-what-i-do-before-i-trust-an-mcp-server" class="hash-link" aria-label="Direct link to Here‚Äôs What I Do Before I Trust an MCP Server" title="Direct link to Here‚Äôs What I Do Before I Trust an MCP Server">‚Äã</a></h2>
<p>Any time I‚Äôm checking out a new MCP server to plug into Goose, I start with <strong><a href="https://glama.ai/mcp/servers" target="_blank" rel="noopener noreferrer">Glama.ai</a></strong>.</p>
<p>Glama is an all-in-one AI workspace, and it maintains one of the <strong>most comprehensive and security-aware MCP server directories</strong> that I've seen. The servers listed are either community built or created by the actual companies behind the tools, like <strong>Azure</strong> or <strong>JetBrains</strong>.</p>
<p>Each server gets a <strong>report card</strong>, so at a glance you can quickly assess whether it‚Äôs solid or a little sketchy.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-glama-scores">What Glama Scores<a href="https://block.github.io/goose/blog/2025/03/26/mcp-security#what-glama-scores" class="hash-link" aria-label="Direct link to What Glama Scores" title="Direct link to What Glama Scores">‚Äã</a></h2>
<p>Here‚Äôs what Glama grades servers on:</p>
<ul>
<li>‚úÖ <strong>Security</strong> ‚Äì Checks for known vulnerabilities in the server or its dependencies</li>
<li>‚úÖ <strong>License</strong> ‚Äì Confirms it‚Äôs using a permissive open source license</li>
<li>‚úÖ <strong>Quality</strong> ‚Äì Indicates whether the server is running and functions as expected</li>
</ul>
<p>You‚Äôll also see helpful context like how many tools the server exposes, whether it has a README file, when it was last updated, and whether it supports live previews through the MCP inspector tool.</p>
<p>Glama doesn't just perform these checks once, they <strong>revaluate servers regularly</strong>, so if something breaks or a vulnerability gets introduced, the score updates automatically.</p>
<p>Here‚Äôs an example of a solid server: the <strong>YouTube MCP server</strong>, which lets Goose download and process videos to create summaries and transcripts.</p>
<p><img decoding="async" loading="lazy" alt="YouTube MCP Score" src="https://block.github.io/goose/assets/images/youtubeMcp-3701319613ac205084485a6ee8f8c41f.png" width="625" height="367" class="img_ev3q"></p>
<blockquote>
<p><em>All A‚Äôs across the board‚Äî<strong>security, license, and quality</strong>.</em></p>
</blockquote>
<p>That‚Äôs exactly the kind of score I look for before I plug Goose into any server.</p>
<p>So please, <strong>check before you connect</strong>.</p>
<p>A quick glance at an MCP directory like Glama can save you from crying on your office floor later. However, once you‚Äôve done your homework?</p>
<p><strong>Have fun. Plug your agent in. Break things (safely). And vibe code with peace of mind.</strong></p>
]]></content>
        <author>
            <name>Ebony Louis</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codename Goose Goes to Boston]]></title>
        <id>https://block.github.io/goose/blog/2025/03/21/goose-boston-meetup</id>
        <link href="https://block.github.io/goose/blog/2025/03/21/goose-boston-meetup"/>
        <updated>2025-03-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We hosted our first Goose Meetup in Boston, bringing together over 70 community members for lightning talks, hacking, and lively conversations about agentic systems and the future of MCPs.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/goose_goes_to_boston_banner-3ef0eedeb9d3eac56907c0c5e615d919.png" width="2240" height="1260" class="img_ev3q"></p>
<p><em>Question: What happens when you bring 70+ AI enthusiasts, open source contributors, and curious learners together in one room?</em></p>
<p><strong>Answer: You get an electric night filled with great conversations, hands-on hacking, and mind-blowing insights into agentic systems.</strong></p>
<p>This week, we hosted our very first <a href="https://block.github.io/goose" target="_blank" rel="noopener noreferrer">Goose</a> Meetup in Boston at the Cambridge Innovation Center. The turnout and energy exceeded all expectations! From first-time Goose users to seasoned AI engineers, attendees gathered to explore how Goose and the <a href="https://modelcontextprotocol.io/introduction" target="_blank" rel="noopener noreferrer">Model Context Protocol (MCP)</a> are shaping the future of AI automation.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-we-hosted-this-meetup">Why We Hosted This Meetup<a href="https://block.github.io/goose/blog/2025/03/21/goose-boston-meetup#why-we-hosted-this-meetup" class="hash-link" aria-label="Direct link to Why We Hosted This Meetup" title="Direct link to Why We Hosted This Meetup">‚Äã</a></h2>
<p>As our community continues to grow, we wanted to create a space where Goose enthusiasts could:</p>
<p>‚úÖ Network and meet like-minded technologists</p>
<p>‚úÖ Geek out over agentic systems and MCP</p>
<p>‚úÖ Learn through talks, demos, and hands-on hacking</p>
<p>Boston has a thriving tech ecosystem, and it was incredible to see so many people come together to explore the future of AI agents.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="in-case-you-missed-it">In Case You Missed It<a href="https://block.github.io/goose/blog/2025/03/21/goose-boston-meetup#in-case-you-missed-it" class="hash-link" aria-label="Direct link to In Case You Missed It" title="Direct link to In Case You Missed It">‚Äã</a></h2>
<p>After pizza and networking, we kicked off with two lightning talks that set the tone for the rest of the night:</p>
<ul>
<li>
<p>Ebony Louis, Developer Advocate at Block, Inc. delivered an engaging introduction to Goose, covering how to get started, its capabilities, and a hands-on demo that hooked the audience. Reflecting on the night, she shared:</p>
<blockquote>
<p>"There‚Äôs no replacement for meeting in person and getting to talk to people face-to-face about where AI agents can take us. It was great to see the excitement of people who were using Goose for the first time, but it was even more productive to get questions and feedback about how we can work together to make the user experience better. AI is changing how we interact online, but this meetup was proof that it can bring us together in real life, too."</p>
</blockquote>
</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Ebony takes the stage" src="https://block.github.io/goose/assets/images/ebony_preparing-013a8b1730a1f75484dfad5694a73a75.jpg" width="5712" height="4284" class="img_ev3q">
<em>Ebony preparing to take the stage</em></p>
<ul>
<li>
<p>Alex Hancock, Senior Software Engineer at Block, Inc. and MCP Committee Member, followed up with a deep dive into Model Context Protocol architecture, breaking down how it powers agentic systems and what‚Äôs next for the ecosystem. Alex was impressed by the enthusiasm in the room, sharing:</p>
<blockquote>
<p>"I was blown away by the attendance and the engagement. I had a lot of fun sticking around after the talks to answer questions and hear how people are thinking of using Goose and MCP."</p>
</blockquote>
</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Alex speaking" src="https://block.github.io/goose/assets/images/alex_speaking-ec13442c55a42985517eb08e0b545137.jpg" width="5712" height="4284" class="img_ev3q">
<em>Alex sharing MCP insights with the audience</em></p>
<p>Both talks were packed with insights, great humor, and interactive moments that had attendees excited for what was to come.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="moments-we-loved">Moments We Loved<a href="https://block.github.io/goose/blog/2025/03/21/goose-boston-meetup#moments-we-loved" class="hash-link" aria-label="Direct link to Moments We Loved" title="Direct link to Moments We Loved">‚Äã</a></h2>
<p>Some of our favorite highlights from the night:</p>
<p>üìû Goose made a live phone call to Hack.Diversity alum Eliana Lopez during the event. This was a fun moment that showcased Goose's real-world capabilities in automating everyday tasks.</p>
<!-- -->
<div style="width:100%;max-width:800px;margin:0 auto"><video controls="" width="100%" height="400px" playsinline=""><source src="/goose/assets/medias/goose_makes_a_call-e45f1890addeb5018da2d70ee2e44796.mp4" type="video/mp4"><p>Your browser does not support the video tag.</p></video></div>
<p>üíª Attendees jumped into hands-on hacking, working on their own projects, experimenting with Goose, and sharing ideas in real time. To make sure everyone could participate, we provided OpenRouter credits, allowing attendees to run Goose without worrying about access barriers.</p>
<p><img decoding="async" loading="lazy" alt="Attendee hacking" src="https://block.github.io/goose/assets/images/attendee_hacking-bdac777f63da49683cf58513629ff01a.jpg" width="5712" height="4284" class="img_ev3q">
<em>Attendee hacking alongside Goose</em></p>
<p><img decoding="async" loading="lazy" alt="Debugging with attendees" src="https://block.github.io/goose/assets/images/debugging_with_attendees-528d912677fc352ddb3f601c2cf4c972.jpg" width="5712" height="4284" class="img_ev3q">
<em>Rizel Scarlett debugging with meetup attendees</em></p>
<p>üí¨ Riveting discussions sparked throughout the evening, including:</p>
<ul>
<li>Security for MCPs ‚Äî How should we be thinking about security as agentic systems scale?</li>
<li>The future of agentic systems ‚Äî What are we now capable of, and what‚Äôs next?</li>
</ul>
<p><img decoding="async" loading="lazy" alt="chatting with attendees" src="https://block.github.io/goose/assets/images/goose_boston_conversations-01c3e57ecd38e55d3159caeb1ebb0fac.jpg" width="4284" height="5712" class="img_ev3q">
<em>Alex chatting with attendees</em></p>
<p>For Marcelle B., a Software Engineer at Block Inc., the meetup highlighted just how diverse the community was and reinforced the importance of making Goose accessible to everyone:</p>
<blockquote>
<p>"It was enlightening to see the variety of backgrounds of the attendees. For a few, Goose was an opportunity to bring the power of AI to bear on their project, and our meetup was a friendly place for them to dip their toes in. This gave me such empathy for the kind of product features and the level of rock-solid implementation we need in development, so that Goose can continue to be an empowering tool, rather than another AI product that you have to be some kind of 'insider' to use."</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-impact--whats-next">The Impact &amp; What‚Äôs Next<a href="https://block.github.io/goose/blog/2025/03/21/goose-boston-meetup#the-impact--whats-next" class="hash-link" aria-label="Direct link to The Impact &amp; What‚Äôs Next" title="Direct link to The Impact &amp; What‚Äôs Next">‚Äã</a></h2>
<p>The excitement and engagement from this meetup proved just how much community-driven learning matters. Attendees loved the experience, with one person sharing:</p>
<blockquote>
<p>"Fantastic event‚Äîwell-paced, super friendly, learned a lot, and met great people. 10/10 would recommend!"</p>
</blockquote>
<p>This event wouldn‚Äôt have been the same without all of you. A huge shoutout to Hack.Diversity, Resilient Coders, Goose contributors, and Boston‚Äôs tech scene for showing up, supporting, and making this meetup such a success!</p>
<p><img decoding="async" loading="lazy" alt="Goose Team in Boston" src="https://block.github.io/goose/assets/images/goose_team_in_boston-83ed4d854908362156459ede34035521.jpg" width="5712" height="4284" class="img_ev3q">
<em>The Goose Team in Boston</em></p>
<ul>
<li>
<p>If you're experiencing FOMO (the Fear of Missing Out) and want to join the next meetup, follow us on <a href="https://linktr.ee/blockopensource" target="_blank" rel="noopener noreferrer">social media</a> to stay updated.</p>
</li>
<li>
<p>Bring a Goose meetup to your city! If you have a venue, reach out to us on <a href="https://discord.gg/block-opensource" target="_blank" rel="noopener noreferrer">Discord</a>‚Äîlet‚Äôs make it happen!</p>
</li>
</ul>
]]></content>
        <author>
            <name>Rizel Scarlett</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cracking the Code with VS Code MCP]]></title>
        <id>https://block.github.io/goose/blog/2025/03/21/goose-vscode</id>
        <link href="https://block.github.io/goose/blog/2025/03/21/goose-vscode"/>
        <updated>2025-03-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Connect Goose directly to your code editor with this Visual Studio Code MCP.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/vscodestream-74eafa34e7ae10cfb738feddecc98519.png" width="1206" height="633" class="img_ev3q"></p>
<p>Want to use Goose in VS Code? On the recent <a href="https://www.youtube.com/watch?v=hG7AnTw-GLU&amp;ab_channel=BlockOpenSource" target="_blank" rel="noopener noreferrer">Wild Goose Case livestream</a>, hosts <a href="https://www.linkedin.com/in/ebonylouis/" target="_blank" rel="noopener noreferrer">Ebony Louis</a> and <a href="https://www.linkedin.com/in/acekyd/" target="_blank" rel="noopener noreferrer">Adewale Abati</a> were joined by <a href="https://www.linkedin.com/in/andrewgertig/" target="_blank" rel="noopener noreferrer">Andrew Gertig</a>, Engineering Lead at Cash App, as he demonstrated the new VSCode MCP and how it brings powerful Goose-assisted coding capabilities directly into VS Code.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-the-vscode-mcp">What is the VSCode MCP?<a href="https://block.github.io/goose/blog/2025/03/21/goose-vscode#what-is-the-vscode-mcp" class="hash-link" aria-label="Direct link to What is the VSCode MCP?" title="Direct link to What is the VSCode MCP?">‚Äã</a></h2>
<p>The <a href="https://github.com/block/vscode-mcp" target="_blank" rel="noopener noreferrer">VSCode MCP Server</a> and its companion <a href="https://marketplace.visualstudio.com/items?itemName=block.vscode-mcp-extension" target="_blank" rel="noopener noreferrer">VSCode Extension</a> enable AI agents like Goose to interact with VS Code through the Model Context Protocol.</p>
<p>As Andrew explained during the stream, an MCP (<a href="https://modelcontextprotocol.io/introduction" target="_blank" rel="noopener noreferrer">Model Context Protocol</a>) server acts as a proxy between a Large Language Model (LLM) and whatever applications or tools you want to access to, in this case, VS Code. Extensions are add-ons based on this protocol that provide a way to extend Goose's functionality for your workflow.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">vscode-mcp/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">‚îú‚îÄ‚îÄ server/    # MCP server implementation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">‚îî‚îÄ‚îÄ extension/ # VS Code extension</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="key-features">Key Features<a href="https://block.github.io/goose/blog/2025/03/21/goose-vscode#key-features" class="hash-link" aria-label="Direct link to Key Features" title="Direct link to Key Features">‚Äã</a></h2>
<p>VSCode MCP and VSCode Extension offer several powerful features for you to explore:</p>
<p><strong>Intelligent Context Awareness</strong></p>
<p>The extension maintains synchronization between Goose and your VS Code environment to understand your project structure and make contextually relevant suggestions. During the live demo, this came in handy as Goose navigated complex codebases with precision.</p>
<p><strong>Interactive Code Modifications</strong></p>
<p>Rather than making direct changes, the extension presents modifications through VS Code's diff tool. This ensures that no code changes happen without your explicit approval, allowing you to keep control over your codebase.</p>
<p><strong>Progressive Complexity Handling</strong></p>
<p>During the demo, the VSCode MCP seamlessly handled tasks ranging in complexity, from basic text modifications to implementing interactive features like animated emojis with mouse interactions.</p>
<p><strong>Real-time Visual Feedback</strong></p>
<p>Developers can see proposed changes in real-time with the diff view, making it easy to understand exactly what modifications Goose is suggesting before accepting them. This was demonstrated when an emoji's sizes visually while preserving existing functionality.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next-for-vscode-mcp">What's Next for VSCode MCP?<a href="https://block.github.io/goose/blog/2025/03/21/goose-vscode#whats-next-for-vscode-mcp" class="hash-link" aria-label="Direct link to What's Next for VSCode MCP?" title="Direct link to What's Next for VSCode MCP?">‚Äã</a></h2>
<p>The features don't end here. The team is actively exploring several exciting features to take VSCode MCP to the next level:</p>
<ul>
<li><strong>Custom diff tool for granular control</strong> - This means you will be able to be selective on specific parts of changes you want to accept or reject.</li>
<li><strong>Smart navigation to specific code locations</strong> - Imagine being able to ask Goose to take you directly to a function definition or a specific implementation.</li>
<li><strong>Enhanced linting integration</strong> - To help maintain code quality standards automatically, making it way easier to fix issues before production.</li>
<li><strong>Terminal integration for command execution</strong> - This would allow Goose to execute commands and display results right in your development environment.</li>
<li><strong>Potential VS Code sidebar integration for Goose chat</strong> - Andrew showed a quick preview of an early prototype showing Goose running directly inside VS Code.</li>
</ul>
<h1>Community and Contributing</h1>
<p>The project is open source, and welcomes contributions from the community. If you'd like to support the project or directly contribute to it, you can check out <a href="https://github.com/block/vscode-mcp" target="_blank" rel="noopener noreferrer">the VSCode MCP repo on GitHub</a>, or <a href="https://discord.gg/block-opensource" target="_blank" rel="noopener noreferrer">join the Block Open Source Discord</a> if you'd like to ask the team any questions or start discussions.</p>
<p>You can also follow the <a href="https://block.github.io/goose/docs/tutorials/vscode-mcp" target="_blank" rel="noopener noreferrer">tutorial showing you how to integrate VS Code with Goose</a>.</p>
]]></content>
        <author>
            <name>Tania Chakraborty</name>
            <uri>https://taniachakraborty.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How I Use Goose to Plan My Week with Asana and Google Calendar MCPs]]></title>
        <id>https://block.github.io/goose/blog/2025/03/20/asana-calendar-mcp</id>
        <link href="https://block.github.io/goose/blog/2025/03/20/asana-calendar-mcp"/>
        <updated>2025-03-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Use MCPs with Goose to automate task management and enhance productivity.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/mcp-planner-761303c5ddcd5c79ed853536e3f87bcf.png" width="1200" height="630" class="img_ev3q"></p>
<p>Mondays are overwhelming. A pile of unfinished tasks from last week, new priorities rolling in, and meetings scattered across the calendar. It‚Äôs a lot üò©. Instead of manually sorting through my todos and figuring out where everything fits, I use a couple of handy MCP servers with Goose and let it figure out my week.</p>
<p>There's so many amazing MCP servers out there to make my work life better, including <a href="https://github.com/roychri/mcp-server-asana" target="_blank" rel="noopener noreferrer">Asana</a> and <a href="https://www.pulsemcp.com/servers?q=google+calendar" target="_blank" rel="noopener noreferrer">Google Calendar</a>. I added these as Goose extensions, which means Goose can now can pull in my tasks, analyze them, and schedule them, all with one simple prompt:</p>
<blockquote>
<p><em><strong>Goose, pull all uncompleted tasks assigned to me in Asana. Group them by type of work to reduce context switching. Estimate how long each task will take. Then, schedule each task accordingly in my Google Calendar.  Make sure not to double book or overload any single day.</strong></em></p>
</blockquote>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>I used GPT-4o for this task</p></div></div>
<p>With this prompt, Goose reviews my uncompleted tasks in Asana (note that I have my workspace, project, and user IDs stored in <a href="https://block.github.io/goose/docs/tutorials/memory-mcp">memory</a>).</p>
<p>Rather than bouncing between different types of work, which is a productivity killer, Goose sorts my tasks into categories based on context. For example:</p>
<ul>
<li>Writing-related tasks (blog posts, documentation, emails)</li>
<li>Async collaboration (PR reviews, providing feedback)</li>
<li>Technical work (coding, etc)</li>
</ul>
<p>By grouping similar tasks, I can stay in the right headspace without constantly switching gears.</p>
<p>Goose then estimates how long each task will take, the complexity of the task, and any deadlines. If I need to manually adjust something, I can, but it‚Äôs usually pretty spot on.</p>
<p>With my tasks organized and estimated, Goose finds open time slots in my Google Calendar and automatically schedules them. It avoids my meetings and ensures I‚Äôm not overloading any single day.</p>
<p>Within the first few minutes of the start of my week, my schedule is already mapped out, optimized for focus.</p>
<p>This has been so extremely helpful in increasing my productivity. Thanks, Goose! üöÄ</p>
]]></content>
        <author>
            <name>Angie Jones</name>
            <uri>https://angiejones.tech</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AI Prompting 101: How to Get the Best Responses from Your AI Agent]]></title>
        <id>https://block.github.io/goose/blog/2025/03/19/better-ai-prompting</id>
        <link href="https://block.github.io/goose/blog/2025/03/19/better-ai-prompting"/>
        <updated>2025-03-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to prompt your AI agent the right way.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="blog cover" src="https://block.github.io/goose/assets/images/prompt-078b12695f95c4f0eac3861a8a2611ef.png" width="2240" height="1260" class="img_ev3q"></p>
<p>Remember that saying, "it‚Äôs not what you ask, but <strong>how you ask</strong>"?</p>
<p>When I first started working with Goose as an AI agent, I was convinced there had to be one ‚Äòbest' prompting style. I spent so much time trying to figure out which one was superior, but the more I used Goose, the more I realized that couldn't be further from the truth. There isn‚Äôt one <em>right</em>  way to prompt AI, but there are better approaches depending on what your end goal is.</p>
<p>So, let‚Äôs go through <strong>which prompt style works best for your specific needs</strong>, and how you can use them to vibe code a little better with Goose.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="instruction-based-prompting">Instruction-Based Prompting<a href="https://block.github.io/goose/blog/2025/03/19/better-ai-prompting#instruction-based-prompting" class="hash-link" aria-label="Direct link to Instruction-Based Prompting" title="Direct link to Instruction-Based Prompting">‚Äã</a></h2>
<p>If you‚Äôre not a developer or you're just new to Goose, this is a great place to start. The best way to get good responses is to be as clear and direct as possible. Goose works best when given specific instructions, so tell it exactly what you need and include all of the important details. If you‚Äôre too vague, you might end up with an overly technical or even a possibly incomplete answer that doesn‚Äôt actually help you.</p>
<p>For example, instead of saying:</p>
<p>‚ùå Okay Prompt:</p>
<blockquote>
<p><em><strong>Goose, what‚Äôs a pull request?</strong></em></p>
</blockquote>
<p>This might give you a super technical definition that assumes you already know the basics.</p>
<p>So, you could say:</p>
<p>‚úÖ Better Prompt:</p>
<blockquote>
<p><em><strong>Goose, explain how GitHub pull requests work like I‚Äôm new to coding</strong></em></p>
</blockquote>
<p>This tells Goose exactly what you need and at what level.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>pro tip</div><div class="admonitionContent_BuS1"><p>If you want Goose to remember your preferences, you can say,</p><blockquote>
<p><em><strong>Goose, remember I‚Äôm not a developer. Explain things at a high level unless I ask for technical details</strong></em></p>
</blockquote><p>If you have the <a href="https://block.github.io/goose/docs/tutorials/memory-mcp">Memory Extension</a> enabled, Goose will save this preference so you won‚Äôt have to remind it every time.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="chain-of-thought-prompting">Chain-of-Thought Prompting<a href="https://block.github.io/goose/blog/2025/03/19/better-ai-prompting#chain-of-thought-prompting" class="hash-link" aria-label="Direct link to Chain-of-Thought Prompting" title="Direct link to Chain-of-Thought Prompting">‚Äã</a></h2>
<p>Sometimes a topic or task can just be too much to tackle all at once, and that‚Äôs where Chain-of-Thought Prompting comes in. Instead of getting this enormous and complicated response back, you can guide Goose to break things down step by step so it‚Äôs easier to follow.</p>
<p>For example, instead of saying:</p>
<p>‚ùå Okay Prompt:</p>
<blockquote>
<p><em><strong>Goose, what are Model Context Protocol Servers, and how are they used in goose?</strong></em></p>
</blockquote>
<p>which might get you a response that's hard to follow, you could say:</p>
<p>‚úÖ Better Prompt:</p>
<blockquote>
<p><em><strong>Goose, walk me through what MCPs are and how they're used in gosoe, step by step</strong></em></p>
</blockquote>
<p>This forces Goose to slow down and explain each part clearly, making it easier to understand.</p>
<p>Now, if you want to take it a step further and make sure Goose understands the exact style of responses you're expecting, that‚Äôs when Few-Shot Prompting is the way to go.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="few-shot-prompting">Few-Shot Prompting<a href="https://block.github.io/goose/blog/2025/03/19/better-ai-prompting#few-shot-prompting" class="hash-link" aria-label="Direct link to Few-Shot Prompting" title="Direct link to Few-Shot Prompting">‚Äã</a></h2>
<p>If you need Goose to match a specific style or format, the best way to get there is by showing it what you want. I use this all the time! Since AI models learn patterns from examples, giving Goose a reference helps it skip the guesswork and just get straight to the point.</p>
<p>For example, instead of saying:</p>
<p>‚ùå Okay Prompt:</p>
<blockquote>
<p><em><strong>Goose, summarize this report</strong></em></p>
</blockquote>
<p>you could say:</p>
<p>‚úÖ Better Prompt:</p>
<blockquote>
<p><em><strong>Goose, here‚Äôs how I usually summarize reports: (example summary). Can you summarize this new report the same way?</strong></em></p>
</blockquote>
<p>By providing an example, you‚Äôre guiding Goose to the answer that you actually want.</p>
<p>Now, what if you've given Goose an example and it‚Äôs first response isn‚Äôt quite right? There's no need to end the session and start over, that‚Äôs when Iterative Refinement Prompting is useful.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="iterative-refinement-prompting">Iterative Refinement Prompting<a href="https://block.github.io/goose/blog/2025/03/19/better-ai-prompting#iterative-refinement-prompting" class="hash-link" aria-label="Direct link to Iterative Refinement Prompting" title="Direct link to Iterative Refinement Prompting">‚Äã</a></h2>
<p>Let‚Äôs be real, Goose just like any AI agent isn‚Äôt always going to get it 'right' on the first try. Sometimes, it gives you a response that's way too technical, other times, it might completely miss the mark or even worse, hallucinate its way into a weird, made-up answer, that kind of sounds true. But instead of giving up and starting over, you can steer the conversation by giving feedback on what needs to change.</p>
<p>Since Goose allows you to bring your own LLM, the way it responds depends a lot on which model you‚Äôre using. Some LLMs need a little extra guidance, while others might require a few rounds of refinement before they get things right. The good news? You can shape the response without completely starting over.</p>
<p>For example, if Goose spits out something overly complicated, don‚Äôt just accept it, you can push back! Try saying:</p>
<blockquote>
<p><em><strong>Goose, this response is too technical. Can you simplify it?</strong></em></p>
</blockquote>
<p>Or if something sounds off and you want to do a fact check:</p>
<blockquote>
<p><em><strong>Goose, where did you get that information? How do you know it's accurate?</strong></em></p>
</blockquote>
<p>Think of working with Goose like pair programming or collaborating with a coworker. Sometimes, you need to clarify what you want or redirect the conversation to get make sure you're both on the same page.</p>
<p>But what if you don‚Äôt have a clear example or specific instructions to guide Goose? That‚Äôs when I would use Zero-Shot Prompting.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="zero-shot-prompting">Zero-Shot Prompting<a href="https://block.github.io/goose/blog/2025/03/19/better-ai-prompting#zero-shot-prompting" class="hash-link" aria-label="Direct link to Zero-Shot Prompting" title="Direct link to Zero-Shot Prompting">‚Äã</a></h2>
<p>Sometimes, you just want Goose to take a wild guess, get a little creative, and run with it. That‚Äôs exactly what Zero-Shot Prompting is for, it lets Goose figure things out on its own, without any examples or extra guidance from you.</p>
<p>For example, you might say:</p>
<blockquote>
<p><em><strong>Goose, write me a project update for my team</strong></em></p>
</blockquote>
<p>or:</p>
<blockquote>
<p><em><strong>Goose, I want to build a cool prompt directory</strong></em></p>
</blockquote>
<p>I love using this approach when I have a rough idea but no real clear direction. It‚Äôs like brainstorming but with AI, Goose will throw out ideas, suggest next steps, and sometimes even point out things I would‚Äôve never even thought of. More often than not, my original idea ends up 10x better just by letting Goose take the lead.</p>
<p>Now, if you want Goose to not just come up with amazing ideas but also be funny, helpful, and maybe even a little nicer to you, that‚Äôs when you need to put those manners you learned in elementary school to use.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="politeness-based-prompting">Politeness-Based Prompting<a href="https://block.github.io/goose/blog/2025/03/19/better-ai-prompting#politeness-based-prompting" class="hash-link" aria-label="Direct link to Politeness-Based Prompting" title="Direct link to Politeness-Based Prompting">‚Äã</a></h2>
<p>Believe it or not, being polite actually makes AI responses better! Even though Goose isn‚Äôt self-aware‚Ä¶‚Ä¶yet‚Ä¶‚Ä¶ üëÄ, AI models tend to generate more thoughtful, structured, and sometimes even friendlier replies when asked nicely. So yes, saying ‚Äúplease‚Äù and ‚Äúthank you‚Äù actually makes a difference.</p>
<p>For example, instead of saying:</p>
<p>‚ùå Okay Prompt:</p>
<blockquote>
<p><em><strong>Goose, generate a project update</strong></em></p>
</blockquote>
<p>you could say:</p>
<p>‚úÖ Better Prompt:</p>
<blockquote>
<p><em><strong>Goose, could you generate a project update for me, please? Thanks!</strong></em></p>
</blockquote>
<p>Goose will respond either way, but <strong>trust me</strong>, polite prompts tend to get you better answers. One of our users once got the sweetest response from Goose at the end of a project, like it was genuinely grateful for the collaboration and even wished them sweet dreams. It was adorable!!</p>
<p><img decoding="async" loading="lazy" alt="goose response" src="https://block.github.io/goose/assets/images/politenessprompt-8bde8ee9a219af685f98f45be5977226.png" width="2322" height="1470" class="img_ev3q"></p>
<blockquote>
<p><em>Here‚Äôs the actual response, Goose is really out here making people‚Äôs day.</em></p>
</blockquote>
<p>And the best part? This works with any prompting style. So, if you want Goose to be helpful, clear, and maybe even a little extra nice to you, be good to Goose and Goose will be good to you.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-best-prompts-feel-natural">The Best Prompts Feel Natural<a href="https://block.github.io/goose/blog/2025/03/19/better-ai-prompting#the-best-prompts-feel-natural" class="hash-link" aria-label="Direct link to The Best Prompts Feel Natural" title="Direct link to The Best Prompts Feel Natural">‚Äã</a></h2>
<p>At the end of the day, all these prompting styles are just tools, at your disposal. The most important thing is to keep your prompts clear and natural. You don‚Äôt have to overthink it, but adding a little structure can make a huge difference in getting the responses you actually want.</p>
<p>Goose is here to make your life easier, so the next time you open up a session, just keep your goal in mind, experiment with different prompting styles, and see what works best for you.</p>
]]></content>
        <author>
            <name>Ebony Louis</name>
        </author>
    </entry>
</feed>